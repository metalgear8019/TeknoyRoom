{"version":3,"sources":["meteor://ðŸ’»app/packages/velocity_meteor-stubs/index.js"],"names":[],"mappingsfile":"/packages/velocity_meteor-stubs.js","sourcesContent":["/*jshint -W020, -W079 */\n/*global MeteorStubs: true*/\n\"use strict\";\n\n// TODO: Blaze?\n// TODO: ReactiveVar\n// TODO: EJSON?\n\n//////////////////////////////////////////////////////////////////////\n// Meteor Stubs\n//\n// Stubs for the core Meteor objects.\n//\n// Usage:\n//\n//   MeteorStubs.install()   - installs stubs into the global object\n//                             (either `global` or `window`)\n//   MeteorStubs.uninstall() - restore global object fields to their\n//                             previous values\n//\n// A note about the structure of this package:\n//   Having everything all in a single file is not ideal but it makes\n//   it much easier to include client-side.  Please see the ToC below\n//   to ease browsing.  Each section has a unique id which you can\n//   search on.\n//\n//\n// Table of Contents:\n//\n//   MS00 - MeteorStubs\n//   MS01 - Common prototypes\n//          Collection, Cursor, ObjectId\n//   MS05 - Meteor\n//     MS05-1 - Meteor.Collection\n//     MS05-2 - Meteor.Collection.ObjectID\n//     MS05-3 - Meteor.users\n//   MS06 - Check\n//   MS10 - Npm\n//   MS15 - Tracker\n//   MS20 - Package\n//   MS25 - Random\n//   MS30 - Session\n//   MS35 - Templates\n//   MS40 - Handlebars\n//   MS45 - Accounts\n//   MS48 - ServiceConfiguration\n//   MS50 - __meteor_bootstrap__\n//   MS55 - share\n//   MS60 - Mongo\n//   MS62 - HTTP\n//   MS63 - Email\n//   MS65 - Assets\n//   MS70 - Cordova\n//\n//////////////////////////////////////////////////////////////////////\n\n\n// Factory methods are used so that each time `MeteorStubs.install` is\n// called, a clean object will be returned.\n// Each stub has one factory associated with it.\n\nvar stubFactories = {},\n    emptyFn = function () {},\n    stringFn = function () { return '' },\n    callbackFn = function (fn) { fn() };\n\n\n\n\n//////////////////////////////////////////////////////////////////////\n// MS00 - MeteorStubs\n//////////////////////////////////////////////////////////////////////\n\n;(function (global) {\n  var _context = global,\n      _originals = {};\n\n  var meteorStubs = {\n\n    /**\n     * Install Meteor stubs into global context\n     *\n     * @method install\n     * @param {Object} [context] Optional. The context to attach\n     *                 stubs to.  Default: the global context.\n     */\n    install: function (context) {\n\n      if ('object' == typeof context && null !== context) {\n        // place stubs on user-defined context\n        _context = context;\n      }\n\n      for (var key in stubFactories) {\n        if (_context[key] && !_originals[key]) {\n          _originals[key] = _context[key];\n        }\n        _context[key] = stubFactories[key]();\n      }\n\n    },\n\n\n    /**\n     * Remove stubs by restoring context's original fields\n     *\n     * @method uninstall\n     */\n    uninstall: function () {\n      for (var key in stubFactories) {\n        if ('undefined' == typeof _originals[key]) {\n          delete _context[key];\n        } else {\n          _context[key] = _originals[key];\n        }\n      }\n    }\n\n  };  // end global.MeteorStubs\n\n  if (typeof Meteor === 'undefined') {\n    global.MeteorStubs = meteorStubs;\n  } else {\n    try {\n      MeteorStubs = meteorStubs;\n    } catch (error) {\n      global.MeteorStubs = meteorStubs;\n    }\n    if (Meteor.isClient) {\n      global.MeteorStubs = meteorStubs;\n    }\n  }\n\n})(typeof global === 'undefined' ? window : global);\n\n\n\n//////////////////////////////////////////////////////////////////////\n// Common Prototypes - MS01\n//////////////////////////////////////////////////////////////////////\n\nvar prototypes = {\n\n  Collection: {\n    find: function () {\n      var Mongo = stubFactories.Mongo();\n      return new Mongo.Cursor();\n    },\n    findOne: emptyFn,\n    insert: emptyFn,\n    update: emptyFn,\n    upsert: emptyFn,\n    remove: emptyFn,\n    allow: emptyFn,\n    deny: emptyFn,\n    // TODO: Still needed?\n    _ensureIndex: emptyFn\n  },  // end Collection\n\n  Cursor: {\n    forEach: emptyFn,\n    map: emptyFn,\n    fetch: emptyFn,\n    count: emptyFn,\n    observe: emptyFn,\n    observeChanges: emptyFn\n  },\n\n  ObjectID: {\n    getTimestamp: stringFn,\n    toHexString: stringFn,\n    toJSONValue: stringFn\n  }\n\n};  // end prototypes\n\n\n//////////////////////////////////////////////////////////////////////\n// Meteor - MS05\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.Meteor = function () {\n  var _instantiationCounts = {},\n      Meteor;\n\n  function collectionFn (collectionName) {\n    var current = _instantiationCounts[collectionName];\n\n    if (!current) {\n      _instantiationCounts[collectionName] = 1\n    } else {\n      _instantiationCounts[collectionName] = current + 1\n    }\n  }\n\n  Meteor = {\n    // Core\n    isClient: true,\n    isServer: true,\n    isCordova: false,\n    startup: function (newStartupFunction) {\n      this.startupFunctions.push(newStartupFunction);\n    },\n    wrapAsync: emptyFn,\n    absoluteUrl: emptyFn,\n    settings: { public: {} },\n    release: undefined,\n\n    // Publish and subscribe\n    publish: function (modelName, publishFunction) {\n      this.publishFunctions[modelName] = publishFunction;\n    },\n    subscribe: function (modelName, subscribeFunction) {\n      this.subscribeFunctions[modelName] = subscribeFunction;\n      return {\n        ready: function () {\n          return true;\n        }\n      };\n    },\n\n    // Methods\n    methods: function (map) {\n      for (var name in map) {\n        //noinspection JSUnfilteredForInLoop\n        this.methodMap[name] = map[name];\n      }\n    },\n    Error: function(error, reason, details) {\n      if (error) this.error = error;\n      if (reason) this.reason = reason;\n      if (details) this.details = details;\n    },\n    call: function(name /* .. [arguments] .. callback */) {\n      // if it's a function, the last argument is the result callback,\n      // not a parameter to the remote method.\n      var args = Array.prototype.slice.call(arguments, 1);\n      if (args.length && typeof args[args.length - 1] === \"function\") {\n        var callback = args.pop();\n      }\n\n      return Meteor.apply(name, args, callback)\n    },\n    callInContext: function(name, context /* .. [arguments] .. callback */) {\n      // if it's a function, the last argument is the result callback,\n      // not a parameter to the remote method.\n      var args = Array.prototype.slice.call(arguments, 2);\n      if (args.length && typeof args[args.length - 1] === \"function\") {\n        var callback = args.pop();\n      }\n\n      return Meteor.applyInContext(name, context, args, callback)\n    },\n    // TODO: Support options.onResultReceived\n    apply: function(name, args, options, callback) {\n      var context = {\n        userId: null,\n        setUserId: emptyFn,\n        isSimulation: false,\n        unblock: emptyFn,\n        connection: null\n      };\n\n      return Meteor.applyInContext(name, context, args, options, callback);\n    },\n    // TODO: Support options.onResultReceived\n    applyInContext: function(name, context, args, options, callback) {\n      // We were passed 4 arguments.\n      // They may be either (name, context, args, options)\n      // or (name, context, args, callback)\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        //options = {};\n      }\n      //options = options || {};\n\n      return Meteor.executeFunction(function() {\n        return Meteor.methodMap[name].apply(context, args);\n      }, callback);\n    },\n\n    // Server connections\n    status: function () {\n      return {\n        connected: true,\n        status: 'connected',\n        retryCount: 0,\n        retryTime: undefined,\n        reason: undefined\n      }\n    },\n    reconnect: emptyFn,\n    disconnect: emptyFn,\n    onConnection: emptyFn,\n    // TODO: DDP.connect\n\n    // Collections\n    /*\n     * @Deprecated Use Mongo.Collection\n     */\n    Collection: collectionFn,\n    /*\n     * @Deprecated Use Mongo.Collection\n     */\n    SmartCollection: collectionFn,\n\n    // Accounts\n    user: function () {\n      return {\n        emails: []\n      };\n    },\n    userId: function () {\n      return null;\n    },\n    loggingIn: emptyFn,\n    logout: emptyFn,\n    logoutOtherClients: emptyFn,\n    loginWithMeteorDeveloperAccount: emptyFn,\n    loginWithFacebook: emptyFn,\n    loginWithGithub: emptyFn,\n    loginWithGoogle: emptyFn,\n    loginWithMeetup: emptyFn,\n    loginWithTwitter: emptyFn,\n    loginWithWeibo: emptyFn,\n\n    // Timers\n    setTimeout: emptyFn,\n    setInterval: emptyFn,\n    clearTimeout: emptyFn,\n    clearInterval: emptyFn,\n\n    // Internal stub state\n    instantiationCounts: _instantiationCounts,\n    startupFunctions: [],\n    publishFunctions: {},\n    subscribeFunctions: {},\n    methodMap: {},\n\n    // Methods of the stub\n    executeFunction: function(func, callback) {\n      var exception = null;\n      var result = null;\n\n      try {\n        result = func();\n      } catch (ex) {\n        exception = ex;\n      }\n\n      // if we specify the callback function execute it\n      if (callback) {\n        callback(exception, result);\n      } else {\n        if (exception != null) {\n          // rethrow exception\n          throw exception;\n        } else if (Meteor.isServer) {\n          return result;\n        }\n      }\n    },\n\n    runStartupMethods: function () {\n      for (var i = 0; i < this.startupFunctions.length; i += 1) {\n        this.startupFunctions[i]();\n      }\n    }\n  };\n\n\n  //////////////////////////////////////////////////////////////////////\n  // Meteor.Collection - MS05.1\n  //////////////////////////////////////////////////////////////////////\n\n  Meteor.Collection.prototype = prototypes.Collection;\n\n\n\n\n  //////////////////////////////////////////////////////////////////////\n  // Meteor.Collection.ObjectID - MS05.2\n  //////////////////////////////////////////////////////////////////////\n\n  Meteor.Collection.ObjectID = function () {\n    return { _str: '' };\n  };\n  Meteor.Collection.ObjectID.prototype = prototypes.ObjectID\n\n\n\n  //////////////////////////////////////////////////////////////////////\n  // Meteor.users - MS05.3\n  //\n  // Instantiate the users default collection\n  //////////////////////////////////////////////////////////////////////\n\n  Meteor.users = new Meteor.Collection('users');\n\n\n\n\n  return Meteor;\n\n};  // Meteor\n\n\n//////////////////////////////////////////////////////////////////////\n// MS06 - Check\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.check = function () {\n  return emptyFn;\n};\n\nstubFactories.Match = function () {\n  return {\n    test: emptyFn\n  };\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS10 - Npm\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.Npm = function () {\n  return {\n    depends: emptyFn,\n    require: emptyFn\n  };\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS15 - Deps / Tracker\n//////////////////////////////////////////////////////////////////////\n\n// TODO: Tracker.Computation (if needed)\n// TODO: Tracker.Dependency (if needed)\n\nstubFactories.Tracker = function () {\n  return {\n    autorun: callbackFn,\n    flush: emptyFn,\n    nonreactive: callbackFn,\n    active: false,\n    currentComputation: emptyFn,\n    onInvalidate: emptyFn,\n    afterFlush: emptyFn\n  };\n};\nstubFactories.Deps = stubFactories.Tracker\n\n\n//////////////////////////////////////////////////////////////////////\n// MS20 - Package\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.Package = function () {\n  return {\n    describe: emptyFn,\n    onUse: emptyFn,\n    onTest: emptyFn,\n    registerBuildPlugin: emptyFn\n  };\n};\n\n\n\n//////////////////////////////////////////////////////////////////////\n// MS25 - Random\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.Random = function () {\n  return {\n    id: emptyFn,\n    secret: emptyFn,\n    fraction: emptyFn,\n    choice: emptyFn,\n    hexString: emptyFn\n  };\n};\n\n\n\n//////////////////////////////////////////////////////////////////////\n// MS30 - Session\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.Session = function () {\n  return {\n    store: {},\n    set: function (key, value) {\n      this.store[key] = value;\n    },\n    setDefault: function (key, value) {\n      if (typeof this.get(key) === 'undefined') {\n        this.set(key, value);\n      }\n    },\n    get: function (key) {\n      return this.store[key];\n    },\n    equals: function (key, value) {\n      return this.store[key] === value;\n    }\n  };\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS35 - Templates\n//////////////////////////////////////////////////////////////////////\n\nfunction TemplateClass () {}\nTemplateClass.prototype = {\n  stub: function (templateName) {\n    TemplateClass.prototype[templateName] = {\n      eventMap: {},\n      events: function (eventMap) {\n        for (var event in eventMap) {\n          //noinspection JSUnfilteredForInLoop\n          TemplateClass.prototype[templateName].eventMap[event] = eventMap[event];\n        }\n      },\n      helpers: function (helperMap) {\n        for (var helper in helperMap) {\n          //noinspection JSUnfilteredForInLoop\n          TemplateClass.prototype[templateName][helper] = helperMap[helper];\n        }\n      },\n      fireEvent: function (key) {\n        if (arguments.length > 1) {\n          var args = Array.prototype.slice.call(arguments, 1);\n          TemplateClass.prototype[templateName].eventMap[key].apply(null, args);\n        } else {\n          TemplateClass.prototype[templateName].eventMap[key]();\n        }\n      },\n      // Allows you to set an attribute in the event 'this' context\n      addContextAttribute: function (key, value) {\n        TemplateClass.prototype[templateName].eventMap[key] = value;\n      }\n    };\n  }\n};\n\nstubFactories.Template = function () {\n  var Template = new TemplateClass();\n\n  Template.registerHelper = emptyFn;\n  Template.instance = emptyFn;\n  Template.currentData = emptyFn;\n  Template.parentData = emptyFn;\n  Template.body = {};\n\n  return Template;\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS40 - Handlebars\n//////////////////////////////////////////////////////////////////////\n\nfunction HandlebarsClass () {}\nHandlebarsClass.prototype = {\n  helpers: {},\n  registerHelper: function (name, method) {\n    this.helpers[name] = method;\n  }\n};\n\nstubFactories.Handlebars = function () {\n  return new HandlebarsClass();\n};\n\n\n\n//////////////////////////////////////////////////////////////////////\n// MS45 - Accounts\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.Accounts = function () {\n  return {\n    // Accounts\n    config: emptyFn,\n    ui: {\n      config: emptyFn\n    },\n    validateNewUser: emptyFn,\n    onCreateUser: emptyFn,\n    validateLoginAttempt: emptyFn,\n    onLogin: emptyFn,\n    onLoginFailure: emptyFn,\n\n    // Passwords\n    createUser: emptyFn,\n    changePassword: emptyFn,\n    forgotPassword: emptyFn,\n    resetPassword: emptyFn,\n    setPassword: emptyFn,\n    verifyEmail: emptyFn,\n\n    sendResetPasswordEmail: emptyFn,\n    sendEnrollmentEmail: emptyFn,\n    sendVerificationEmail: emptyFn,\n\n    onResetPasswordLink: emptyFn,\n    onEnrollmentLink: emptyFn,\n    onEmailVerificationLink: emptyFn,\n\n    emailTemplates: {\n      resetPassword: {},\n      enrollAccount: {},\n      verifyEmail: {}\n    }\n  };\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS48 - ServiceConfiguration\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.ServiceConfiguration = function () {\n  var Mongo = stubFactories.Mongo();\n  var ServiceConfiguration = {\n    configurations: new Mongo.Collection('meteor_accounts_loginServiceConfiguration')\n  }\n\n  return ServiceConfiguration;\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS50 - __meteor_bootstrap__\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.__meteor_bootstrap__ = function () {\n  return {\n    deployConfig: {\n      packages: { 'mongo-livedata': { url: '' } }\n    }\n  };\n};\n\n//////////////////////////////////////////////////////////////////////\n// MS55 - share\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.share = function () {\n  return {};\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS60 - Mongo\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.Mongo = function () {\n  var _instantiationCounts = {},\n      Mongo;\n\n  function collectionFn (collectionName) {\n    var current = _instantiationCounts[collectionName];\n\n    if (!current) {\n      _instantiationCounts[collectionName] = 1\n    } else {\n      _instantiationCounts[collectionName] = current + 1\n    }\n  }\n\n  Mongo = {\n    instantiationCounts: _instantiationCounts,\n    Collection: collectionFn,\n    Cursor: emptyFn,\n    ObjectID: function () {\n      return { _str: '' };\n    }\n  };\n\n  Mongo.Collection.prototype = prototypes.Collection;\n  Mongo.Cursor.prototype = prototypes.Cursor;\n  Mongo.ObjectID.prototype = prototypes.ObjectID;\n\n  return Mongo;\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS62 - HTTP\n//////////////////////////////////////////////////////////////////////\nstubFactories.HTTP = function () {\n  return {\n    call: emptyFn,\n    get: emptyFn,\n    post: emptyFn,\n    put: emptyFn,\n    del: emptyFn\n  };\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS63 - Email\n//////////////////////////////////////////////////////////////////////\nstubFactories.Email = function () {\n  return {\n    send: emptyFn\n  };\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS65 - Assets\n//////////////////////////////////////////////////////////////////////\n\nstubFactories.Assets = function () {\n  return {\n    getText: stringFn,\n    getBinary: emptyFn\n  };\n};\n\n\n//////////////////////////////////////////////////////////////////////\n// MS70 - Cordova\n//////////////////////////////////////////////////////////////////////\nstubFactories.Cordova = function () {\n  return {\n    depends: emptyFn\n  };\n}\n\n"]}