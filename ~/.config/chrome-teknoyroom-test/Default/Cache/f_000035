{"version":3,"sources":["meteor://ðŸ’»app/packages/pedrohenriquerls_peerjs/packages/pedrohenriquerls_peerjs.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4E","file":"/packages/pedrohenriquerls_peerjs.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/pedrohenriquerls:peerjs/client/peer.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! peerjs.js build:0.3.9, development. Copyright(c) 2013 Michelle Bu <michelle@michellebu.com> */                     // 1\n(function(exports){                                                                                                    // 2\nvar binaryFeatures = {};                                                                                               // 3\nbinaryFeatures.useBlobBuilder = (function(){                                                                           // 4\n  try {                                                                                                                // 5\n    new Blob([]);                                                                                                      // 6\n    return false;                                                                                                      // 7\n  } catch (e) {                                                                                                        // 8\n    return true;                                                                                                       // 9\n  }                                                                                                                    // 10\n})();                                                                                                                  // 11\n                                                                                                                       // 12\nbinaryFeatures.useArrayBufferView = !binaryFeatures.useBlobBuilder && (function(){                                     // 13\n  try {                                                                                                                // 14\n    return (new Blob([new Uint8Array([])])).size === 0;                                                                // 15\n  } catch (e) {                                                                                                        // 16\n    return true;                                                                                                       // 17\n  }                                                                                                                    // 18\n})();                                                                                                                  // 19\n                                                                                                                       // 20\nexports.binaryFeatures = binaryFeatures;                                                                               // 21\nexports.BlobBuilder = window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder || window.BlobBuilder; // 22\n                                                                                                                       // 23\nfunction BufferBuilder(){                                                                                              // 24\n  this._pieces = [];                                                                                                   // 25\n  this._parts = [];                                                                                                    // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nBufferBuilder.prototype.append = function(data) {                                                                      // 29\n  if(typeof data === 'number') {                                                                                       // 30\n    this._pieces.push(data);                                                                                           // 31\n  } else {                                                                                                             // 32\n    this.flush();                                                                                                      // 33\n    this._parts.push(data);                                                                                            // 34\n  }                                                                                                                    // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nBufferBuilder.prototype.flush = function() {                                                                           // 38\n  if (this._pieces.length > 0) {                                                                                       // 39\n    var buf = new Uint8Array(this._pieces);                                                                            // 40\n    if(!binaryFeatures.useArrayBufferView) {                                                                           // 41\n      buf = buf.buffer;                                                                                                // 42\n    }                                                                                                                  // 43\n    this._parts.push(buf);                                                                                             // 44\n    this._pieces = [];                                                                                                 // 45\n  }                                                                                                                    // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\nBufferBuilder.prototype.getBuffer = function() {                                                                       // 49\n  this.flush();                                                                                                        // 50\n  if(binaryFeatures.useBlobBuilder) {                                                                                  // 51\n    var builder = new BlobBuilder();                                                                                   // 52\n    for(var i = 0, ii = this._parts.length; i < ii; i++) {                                                             // 53\n      builder.append(this._parts[i]);                                                                                  // 54\n    }                                                                                                                  // 55\n    return builder.getBlob();                                                                                          // 56\n  } else {                                                                                                             // 57\n    return new Blob(this._parts);                                                                                      // 58\n  }                                                                                                                    // 59\n};                                                                                                                     // 60\nexports.BinaryPack = {                                                                                                 // 61\n  unpack: function(data){                                                                                              // 62\n    var unpacker = new Unpacker(data);                                                                                 // 63\n    return unpacker.unpack();                                                                                          // 64\n  },                                                                                                                   // 65\n  pack: function(data){                                                                                                // 66\n    var packer = new Packer();                                                                                         // 67\n    packer.pack(data);                                                                                                 // 68\n    var buffer = packer.getBuffer();                                                                                   // 69\n    return buffer;                                                                                                     // 70\n  }                                                                                                                    // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\nfunction Unpacker (data){                                                                                              // 74\n  // Data is ArrayBuffer                                                                                               // 75\n  this.index = 0;                                                                                                      // 76\n  this.dataBuffer = data;                                                                                              // 77\n  this.dataView = new Uint8Array(this.dataBuffer);                                                                     // 78\n  this.length = this.dataBuffer.byteLength;                                                                            // 79\n}                                                                                                                      // 80\n                                                                                                                       // 81\n                                                                                                                       // 82\nUnpacker.prototype.unpack = function(){                                                                                // 83\n  var type = this.unpack_uint8();                                                                                      // 84\n  if (type < 0x80){                                                                                                    // 85\n    var positive_fixnum = type;                                                                                        // 86\n    return positive_fixnum;                                                                                            // 87\n  } else if ((type ^ 0xe0) < 0x20){                                                                                    // 88\n    var negative_fixnum = (type ^ 0xe0) - 0x20;                                                                        // 89\n    return negative_fixnum;                                                                                            // 90\n  }                                                                                                                    // 91\n  var size;                                                                                                            // 92\n  if ((size = type ^ 0xa0) <= 0x0f){                                                                                   // 93\n    return this.unpack_raw(size);                                                                                      // 94\n  } else if ((size = type ^ 0xb0) <= 0x0f){                                                                            // 95\n    return this.unpack_string(size);                                                                                   // 96\n  } else if ((size = type ^ 0x90) <= 0x0f){                                                                            // 97\n    return this.unpack_array(size);                                                                                    // 98\n  } else if ((size = type ^ 0x80) <= 0x0f){                                                                            // 99\n    return this.unpack_map(size);                                                                                      // 100\n  }                                                                                                                    // 101\n  switch(type){                                                                                                        // 102\n    case 0xc0:                                                                                                         // 103\n      return null;                                                                                                     // 104\n    case 0xc1:                                                                                                         // 105\n      return undefined;                                                                                                // 106\n    case 0xc2:                                                                                                         // 107\n      return false;                                                                                                    // 108\n    case 0xc3:                                                                                                         // 109\n      return true;                                                                                                     // 110\n    case 0xca:                                                                                                         // 111\n      return this.unpack_float();                                                                                      // 112\n    case 0xcb:                                                                                                         // 113\n      return this.unpack_double();                                                                                     // 114\n    case 0xcc:                                                                                                         // 115\n      return this.unpack_uint8();                                                                                      // 116\n    case 0xcd:                                                                                                         // 117\n      return this.unpack_uint16();                                                                                     // 118\n    case 0xce:                                                                                                         // 119\n      return this.unpack_uint32();                                                                                     // 120\n    case 0xcf:                                                                                                         // 121\n      return this.unpack_uint64();                                                                                     // 122\n    case 0xd0:                                                                                                         // 123\n      return this.unpack_int8();                                                                                       // 124\n    case 0xd1:                                                                                                         // 125\n      return this.unpack_int16();                                                                                      // 126\n    case 0xd2:                                                                                                         // 127\n      return this.unpack_int32();                                                                                      // 128\n    case 0xd3:                                                                                                         // 129\n      return this.unpack_int64();                                                                                      // 130\n    case 0xd4:                                                                                                         // 131\n      return undefined;                                                                                                // 132\n    case 0xd5:                                                                                                         // 133\n      return undefined;                                                                                                // 134\n    case 0xd6:                                                                                                         // 135\n      return undefined;                                                                                                // 136\n    case 0xd7:                                                                                                         // 137\n      return undefined;                                                                                                // 138\n    case 0xd8:                                                                                                         // 139\n      size = this.unpack_uint16();                                                                                     // 140\n      return this.unpack_string(size);                                                                                 // 141\n    case 0xd9:                                                                                                         // 142\n      size = this.unpack_uint32();                                                                                     // 143\n      return this.unpack_string(size);                                                                                 // 144\n    case 0xda:                                                                                                         // 145\n      size = this.unpack_uint16();                                                                                     // 146\n      return this.unpack_raw(size);                                                                                    // 147\n    case 0xdb:                                                                                                         // 148\n      size = this.unpack_uint32();                                                                                     // 149\n      return this.unpack_raw(size);                                                                                    // 150\n    case 0xdc:                                                                                                         // 151\n      size = this.unpack_uint16();                                                                                     // 152\n      return this.unpack_array(size);                                                                                  // 153\n    case 0xdd:                                                                                                         // 154\n      size = this.unpack_uint32();                                                                                     // 155\n      return this.unpack_array(size);                                                                                  // 156\n    case 0xde:                                                                                                         // 157\n      size = this.unpack_uint16();                                                                                     // 158\n      return this.unpack_map(size);                                                                                    // 159\n    case 0xdf:                                                                                                         // 160\n      size = this.unpack_uint32();                                                                                     // 161\n      return this.unpack_map(size);                                                                                    // 162\n  }                                                                                                                    // 163\n}                                                                                                                      // 164\n                                                                                                                       // 165\nUnpacker.prototype.unpack_uint8 = function(){                                                                          // 166\n  var byte = this.dataView[this.index] & 0xff;                                                                         // 167\n  this.index++;                                                                                                        // 168\n  return byte;                                                                                                         // 169\n};                                                                                                                     // 170\n                                                                                                                       // 171\nUnpacker.prototype.unpack_uint16 = function(){                                                                         // 172\n  var bytes = this.read(2);                                                                                            // 173\n  var uint16 =                                                                                                         // 174\n    ((bytes[0] & 0xff) * 256) + (bytes[1] & 0xff);                                                                     // 175\n  this.index += 2;                                                                                                     // 176\n  return uint16;                                                                                                       // 177\n}                                                                                                                      // 178\n                                                                                                                       // 179\nUnpacker.prototype.unpack_uint32 = function(){                                                                         // 180\n  var bytes = this.read(4);                                                                                            // 181\n  var uint32 =                                                                                                         // 182\n     ((bytes[0]  * 256 +                                                                                               // 183\n       bytes[1]) * 256 +                                                                                               // 184\n       bytes[2]) * 256 +                                                                                               // 185\n       bytes[3];                                                                                                       // 186\n  this.index += 4;                                                                                                     // 187\n  return uint32;                                                                                                       // 188\n}                                                                                                                      // 189\n                                                                                                                       // 190\nUnpacker.prototype.unpack_uint64 = function(){                                                                         // 191\n  var bytes = this.read(8);                                                                                            // 192\n  var uint64 =                                                                                                         // 193\n   ((((((bytes[0]  * 256 +                                                                                             // 194\n       bytes[1]) * 256 +                                                                                               // 195\n       bytes[2]) * 256 +                                                                                               // 196\n       bytes[3]) * 256 +                                                                                               // 197\n       bytes[4]) * 256 +                                                                                               // 198\n       bytes[5]) * 256 +                                                                                               // 199\n       bytes[6]) * 256 +                                                                                               // 200\n       bytes[7];                                                                                                       // 201\n  this.index += 8;                                                                                                     // 202\n  return uint64;                                                                                                       // 203\n}                                                                                                                      // 204\n                                                                                                                       // 205\n                                                                                                                       // 206\nUnpacker.prototype.unpack_int8 = function(){                                                                           // 207\n  var uint8 = this.unpack_uint8();                                                                                     // 208\n  return (uint8 < 0x80 ) ? uint8 : uint8 - (1 << 8);                                                                   // 209\n};                                                                                                                     // 210\n                                                                                                                       // 211\nUnpacker.prototype.unpack_int16 = function(){                                                                          // 212\n  var uint16 = this.unpack_uint16();                                                                                   // 213\n  return (uint16 < 0x8000 ) ? uint16 : uint16 - (1 << 16);                                                             // 214\n}                                                                                                                      // 215\n                                                                                                                       // 216\nUnpacker.prototype.unpack_int32 = function(){                                                                          // 217\n  var uint32 = this.unpack_uint32();                                                                                   // 218\n  return (uint32 < Math.pow(2, 31) ) ? uint32 :                                                                        // 219\n    uint32 - Math.pow(2, 32);                                                                                          // 220\n}                                                                                                                      // 221\n                                                                                                                       // 222\nUnpacker.prototype.unpack_int64 = function(){                                                                          // 223\n  var uint64 = this.unpack_uint64();                                                                                   // 224\n  return (uint64 < Math.pow(2, 63) ) ? uint64 :                                                                        // 225\n    uint64 - Math.pow(2, 64);                                                                                          // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\nUnpacker.prototype.unpack_raw = function(size){                                                                        // 229\n  if ( this.length < this.index + size){                                                                               // 230\n    throw new Error('BinaryPackFailure: index is out of range'                                                         // 231\n      + ' ' + this.index + ' ' + size + ' ' + this.length);                                                            // 232\n  }                                                                                                                    // 233\n  var buf = this.dataBuffer.slice(this.index, this.index + size);                                                      // 234\n  this.index += size;                                                                                                  // 235\n                                                                                                                       // 236\n    //buf = util.bufferToString(buf);                                                                                  // 237\n                                                                                                                       // 238\n  return buf;                                                                                                          // 239\n}                                                                                                                      // 240\n                                                                                                                       // 241\nUnpacker.prototype.unpack_string = function(size){                                                                     // 242\n  var bytes = this.read(size);                                                                                         // 243\n  var i = 0, str = '', c, code;                                                                                        // 244\n  while(i < size){                                                                                                     // 245\n    c = bytes[i];                                                                                                      // 246\n    if ( c < 128){                                                                                                     // 247\n      str += String.fromCharCode(c);                                                                                   // 248\n      i++;                                                                                                             // 249\n    } else if ((c ^ 0xc0) < 32){                                                                                       // 250\n      code = ((c ^ 0xc0) << 6) | (bytes[i+1] & 63);                                                                    // 251\n      str += String.fromCharCode(code);                                                                                // 252\n      i += 2;                                                                                                          // 253\n    } else {                                                                                                           // 254\n      code = ((c & 15) << 12) | ((bytes[i+1] & 63) << 6) |                                                             // 255\n        (bytes[i+2] & 63);                                                                                             // 256\n      str += String.fromCharCode(code);                                                                                // 257\n      i += 3;                                                                                                          // 258\n    }                                                                                                                  // 259\n  }                                                                                                                    // 260\n  this.index += size;                                                                                                  // 261\n  return str;                                                                                                          // 262\n}                                                                                                                      // 263\n                                                                                                                       // 264\nUnpacker.prototype.unpack_array = function(size){                                                                      // 265\n  var objects = new Array(size);                                                                                       // 266\n  for(var i = 0; i < size ; i++){                                                                                      // 267\n    objects[i] = this.unpack();                                                                                        // 268\n  }                                                                                                                    // 269\n  return objects;                                                                                                      // 270\n}                                                                                                                      // 271\n                                                                                                                       // 272\nUnpacker.prototype.unpack_map = function(size){                                                                        // 273\n  var map = {};                                                                                                        // 274\n  for(var i = 0; i < size ; i++){                                                                                      // 275\n    var key  = this.unpack();                                                                                          // 276\n    var value = this.unpack();                                                                                         // 277\n    map[key] = value;                                                                                                  // 278\n  }                                                                                                                    // 279\n  return map;                                                                                                          // 280\n}                                                                                                                      // 281\n                                                                                                                       // 282\nUnpacker.prototype.unpack_float = function(){                                                                          // 283\n  var uint32 = this.unpack_uint32();                                                                                   // 284\n  var sign = uint32 >> 31;                                                                                             // 285\n  var exp  = ((uint32 >> 23) & 0xff) - 127;                                                                            // 286\n  var fraction = ( uint32 & 0x7fffff ) | 0x800000;                                                                     // 287\n  return (sign == 0 ? 1 : -1) *                                                                                        // 288\n    fraction * Math.pow(2, exp - 23);                                                                                  // 289\n}                                                                                                                      // 290\n                                                                                                                       // 291\nUnpacker.prototype.unpack_double = function(){                                                                         // 292\n  var h32 = this.unpack_uint32();                                                                                      // 293\n  var l32 = this.unpack_uint32();                                                                                      // 294\n  var sign = h32 >> 31;                                                                                                // 295\n  var exp  = ((h32 >> 20) & 0x7ff) - 1023;                                                                             // 296\n  var hfrac = ( h32 & 0xfffff ) | 0x100000;                                                                            // 297\n  var frac = hfrac * Math.pow(2, exp - 20) +                                                                           // 298\n    l32   * Math.pow(2, exp - 52);                                                                                     // 299\n  return (sign == 0 ? 1 : -1) * frac;                                                                                  // 300\n}                                                                                                                      // 301\n                                                                                                                       // 302\nUnpacker.prototype.read = function(length){                                                                            // 303\n  var j = this.index;                                                                                                  // 304\n  if (j + length <= this.length) {                                                                                     // 305\n    return this.dataView.subarray(j, j + length);                                                                      // 306\n  } else {                                                                                                             // 307\n    throw new Error('BinaryPackFailure: read index out of range');                                                     // 308\n  }                                                                                                                    // 309\n}                                                                                                                      // 310\n                                                                                                                       // 311\nfunction Packer(){                                                                                                     // 312\n  this.bufferBuilder = new BufferBuilder();                                                                            // 313\n}                                                                                                                      // 314\n                                                                                                                       // 315\nPacker.prototype.getBuffer = function(){                                                                               // 316\n  return this.bufferBuilder.getBuffer();                                                                               // 317\n}                                                                                                                      // 318\n                                                                                                                       // 319\nPacker.prototype.pack = function(value){                                                                               // 320\n  var type = typeof(value);                                                                                            // 321\n  if (type == 'string'){                                                                                               // 322\n    this.pack_string(value);                                                                                           // 323\n  } else if (type == 'number'){                                                                                        // 324\n    if (Math.floor(value) === value){                                                                                  // 325\n      this.pack_integer(value);                                                                                        // 326\n    } else{                                                                                                            // 327\n      this.pack_double(value);                                                                                         // 328\n    }                                                                                                                  // 329\n  } else if (type == 'boolean'){                                                                                       // 330\n    if (value === true){                                                                                               // 331\n      this.bufferBuilder.append(0xc3);                                                                                 // 332\n    } else if (value === false){                                                                                       // 333\n      this.bufferBuilder.append(0xc2);                                                                                 // 334\n    }                                                                                                                  // 335\n  } else if (type == 'undefined'){                                                                                     // 336\n    this.bufferBuilder.append(0xc0);                                                                                   // 337\n  } else if (type == 'object'){                                                                                        // 338\n    if (value === null){                                                                                               // 339\n      this.bufferBuilder.append(0xc0);                                                                                 // 340\n    } else {                                                                                                           // 341\n      var constructor = value.constructor;                                                                             // 342\n      if (constructor == Array){                                                                                       // 343\n        this.pack_array(value);                                                                                        // 344\n      } else if (constructor == Blob || constructor == File) {                                                         // 345\n        this.pack_bin(value);                                                                                          // 346\n      } else if (constructor == ArrayBuffer) {                                                                         // 347\n        if(binaryFeatures.useArrayBufferView) {                                                                        // 348\n          this.pack_bin(new Uint8Array(value));                                                                        // 349\n        } else {                                                                                                       // 350\n          this.pack_bin(value);                                                                                        // 351\n        }                                                                                                              // 352\n      } else if ('BYTES_PER_ELEMENT' in value){                                                                        // 353\n        if(binaryFeatures.useArrayBufferView) {                                                                        // 354\n          this.pack_bin(new Uint8Array(value.buffer));                                                                 // 355\n        } else {                                                                                                       // 356\n          this.pack_bin(value.buffer);                                                                                 // 357\n        }                                                                                                              // 358\n      } else if (constructor == Object){                                                                               // 359\n        this.pack_object(value);                                                                                       // 360\n      } else if (constructor == Date){                                                                                 // 361\n        this.pack_string(value.toString());                                                                            // 362\n      } else if (typeof value.toBinaryPack == 'function'){                                                             // 363\n        this.bufferBuilder.append(value.toBinaryPack());                                                               // 364\n      } else {                                                                                                         // 365\n        throw new Error('Type \"' + constructor.toString() + '\" not yet supported');                                    // 366\n      }                                                                                                                // 367\n    }                                                                                                                  // 368\n  } else {                                                                                                             // 369\n    throw new Error('Type \"' + type + '\" not yet supported');                                                          // 370\n  }                                                                                                                    // 371\n  this.bufferBuilder.flush();                                                                                          // 372\n}                                                                                                                      // 373\n                                                                                                                       // 374\n                                                                                                                       // 375\nPacker.prototype.pack_bin = function(blob){                                                                            // 376\n  var length = blob.length || blob.byteLength || blob.size;                                                            // 377\n  if (length <= 0x0f){                                                                                                 // 378\n    this.pack_uint8(0xa0 + length);                                                                                    // 379\n  } else if (length <= 0xffff){                                                                                        // 380\n    this.bufferBuilder.append(0xda) ;                                                                                  // 381\n    this.pack_uint16(length);                                                                                          // 382\n  } else if (length <= 0xffffffff){                                                                                    // 383\n    this.bufferBuilder.append(0xdb);                                                                                   // 384\n    this.pack_uint32(length);                                                                                          // 385\n  } else{                                                                                                              // 386\n    throw new Error('Invalid length');                                                                                 // 387\n    return;                                                                                                            // 388\n  }                                                                                                                    // 389\n  this.bufferBuilder.append(blob);                                                                                     // 390\n}                                                                                                                      // 391\n                                                                                                                       // 392\nPacker.prototype.pack_string = function(str){                                                                          // 393\n  var length = utf8Length(str);                                                                                        // 394\n                                                                                                                       // 395\n  if (length <= 0x0f){                                                                                                 // 396\n    this.pack_uint8(0xb0 + length);                                                                                    // 397\n  } else if (length <= 0xffff){                                                                                        // 398\n    this.bufferBuilder.append(0xd8) ;                                                                                  // 399\n    this.pack_uint16(length);                                                                                          // 400\n  } else if (length <= 0xffffffff){                                                                                    // 401\n    this.bufferBuilder.append(0xd9);                                                                                   // 402\n    this.pack_uint32(length);                                                                                          // 403\n  } else{                                                                                                              // 404\n    throw new Error('Invalid length');                                                                                 // 405\n    return;                                                                                                            // 406\n  }                                                                                                                    // 407\n  this.bufferBuilder.append(str);                                                                                      // 408\n}                                                                                                                      // 409\n                                                                                                                       // 410\nPacker.prototype.pack_array = function(ary){                                                                           // 411\n  var length = ary.length;                                                                                             // 412\n  if (length <= 0x0f){                                                                                                 // 413\n    this.pack_uint8(0x90 + length);                                                                                    // 414\n  } else if (length <= 0xffff){                                                                                        // 415\n    this.bufferBuilder.append(0xdc)                                                                                    // 416\n    this.pack_uint16(length);                                                                                          // 417\n  } else if (length <= 0xffffffff){                                                                                    // 418\n    this.bufferBuilder.append(0xdd);                                                                                   // 419\n    this.pack_uint32(length);                                                                                          // 420\n  } else{                                                                                                              // 421\n    throw new Error('Invalid length');                                                                                 // 422\n  }                                                                                                                    // 423\n  for(var i = 0; i < length ; i++){                                                                                    // 424\n    this.pack(ary[i]);                                                                                                 // 425\n  }                                                                                                                    // 426\n}                                                                                                                      // 427\n                                                                                                                       // 428\nPacker.prototype.pack_integer = function(num){                                                                         // 429\n  if ( -0x20 <= num && num <= 0x7f){                                                                                   // 430\n    this.bufferBuilder.append(num & 0xff);                                                                             // 431\n  } else if (0x00 <= num && num <= 0xff){                                                                              // 432\n    this.bufferBuilder.append(0xcc);                                                                                   // 433\n    this.pack_uint8(num);                                                                                              // 434\n  } else if (-0x80 <= num && num <= 0x7f){                                                                             // 435\n    this.bufferBuilder.append(0xd0);                                                                                   // 436\n    this.pack_int8(num);                                                                                               // 437\n  } else if ( 0x0000 <= num && num <= 0xffff){                                                                         // 438\n    this.bufferBuilder.append(0xcd);                                                                                   // 439\n    this.pack_uint16(num);                                                                                             // 440\n  } else if (-0x8000 <= num && num <= 0x7fff){                                                                         // 441\n    this.bufferBuilder.append(0xd1);                                                                                   // 442\n    this.pack_int16(num);                                                                                              // 443\n  } else if ( 0x00000000 <= num && num <= 0xffffffff){                                                                 // 444\n    this.bufferBuilder.append(0xce);                                                                                   // 445\n    this.pack_uint32(num);                                                                                             // 446\n  } else if (-0x80000000 <= num && num <= 0x7fffffff){                                                                 // 447\n    this.bufferBuilder.append(0xd2);                                                                                   // 448\n    this.pack_int32(num);                                                                                              // 449\n  } else if (-0x8000000000000000 <= num && num <= 0x7FFFFFFFFFFFFFFF){                                                 // 450\n    this.bufferBuilder.append(0xd3);                                                                                   // 451\n    this.pack_int64(num);                                                                                              // 452\n  } else if (0x0000000000000000 <= num && num <= 0xFFFFFFFFFFFFFFFF){                                                  // 453\n    this.bufferBuilder.append(0xcf);                                                                                   // 454\n    this.pack_uint64(num);                                                                                             // 455\n  } else{                                                                                                              // 456\n    throw new Error('Invalid integer');                                                                                // 457\n  }                                                                                                                    // 458\n}                                                                                                                      // 459\n                                                                                                                       // 460\nPacker.prototype.pack_double = function(num){                                                                          // 461\n  var sign = 0;                                                                                                        // 462\n  if (num < 0){                                                                                                        // 463\n    sign = 1;                                                                                                          // 464\n    num = -num;                                                                                                        // 465\n  }                                                                                                                    // 466\n  var exp  = Math.floor(Math.log(num) / Math.LN2);                                                                     // 467\n  var frac0 = num / Math.pow(2, exp) - 1;                                                                              // 468\n  var frac1 = Math.floor(frac0 * Math.pow(2, 52));                                                                     // 469\n  var b32   = Math.pow(2, 32);                                                                                         // 470\n  var h32 = (sign << 31) | ((exp+1023) << 20) |                                                                        // 471\n      (frac1 / b32) & 0x0fffff;                                                                                        // 472\n  var l32 = frac1 % b32;                                                                                               // 473\n  this.bufferBuilder.append(0xcb);                                                                                     // 474\n  this.pack_int32(h32);                                                                                                // 475\n  this.pack_int32(l32);                                                                                                // 476\n}                                                                                                                      // 477\n                                                                                                                       // 478\nPacker.prototype.pack_object = function(obj){                                                                          // 479\n  var keys = Object.keys(obj);                                                                                         // 480\n  var length = keys.length;                                                                                            // 481\n  if (length <= 0x0f){                                                                                                 // 482\n    this.pack_uint8(0x80 + length);                                                                                    // 483\n  } else if (length <= 0xffff){                                                                                        // 484\n    this.bufferBuilder.append(0xde);                                                                                   // 485\n    this.pack_uint16(length);                                                                                          // 486\n  } else if (length <= 0xffffffff){                                                                                    // 487\n    this.bufferBuilder.append(0xdf);                                                                                   // 488\n    this.pack_uint32(length);                                                                                          // 489\n  } else{                                                                                                              // 490\n    throw new Error('Invalid length');                                                                                 // 491\n  }                                                                                                                    // 492\n  for(var prop in obj){                                                                                                // 493\n    if (obj.hasOwnProperty(prop)){                                                                                     // 494\n      this.pack(prop);                                                                                                 // 495\n      this.pack(obj[prop]);                                                                                            // 496\n    }                                                                                                                  // 497\n  }                                                                                                                    // 498\n}                                                                                                                      // 499\n                                                                                                                       // 500\nPacker.prototype.pack_uint8 = function(num){                                                                           // 501\n  this.bufferBuilder.append(num);                                                                                      // 502\n}                                                                                                                      // 503\n                                                                                                                       // 504\nPacker.prototype.pack_uint16 = function(num){                                                                          // 505\n  this.bufferBuilder.append(num >> 8);                                                                                 // 506\n  this.bufferBuilder.append(num & 0xff);                                                                               // 507\n}                                                                                                                      // 508\n                                                                                                                       // 509\nPacker.prototype.pack_uint32 = function(num){                                                                          // 510\n  var n = num & 0xffffffff;                                                                                            // 511\n  this.bufferBuilder.append((n & 0xff000000) >>> 24);                                                                  // 512\n  this.bufferBuilder.append((n & 0x00ff0000) >>> 16);                                                                  // 513\n  this.bufferBuilder.append((n & 0x0000ff00) >>>  8);                                                                  // 514\n  this.bufferBuilder.append((n & 0x000000ff));                                                                         // 515\n}                                                                                                                      // 516\n                                                                                                                       // 517\nPacker.prototype.pack_uint64 = function(num){                                                                          // 518\n  var high = num / Math.pow(2, 32);                                                                                    // 519\n  var low  = num % Math.pow(2, 32);                                                                                    // 520\n  this.bufferBuilder.append((high & 0xff000000) >>> 24);                                                               // 521\n  this.bufferBuilder.append((high & 0x00ff0000) >>> 16);                                                               // 522\n  this.bufferBuilder.append((high & 0x0000ff00) >>>  8);                                                               // 523\n  this.bufferBuilder.append((high & 0x000000ff));                                                                      // 524\n  this.bufferBuilder.append((low  & 0xff000000) >>> 24);                                                               // 525\n  this.bufferBuilder.append((low  & 0x00ff0000) >>> 16);                                                               // 526\n  this.bufferBuilder.append((low  & 0x0000ff00) >>>  8);                                                               // 527\n  this.bufferBuilder.append((low  & 0x000000ff));                                                                      // 528\n}                                                                                                                      // 529\n                                                                                                                       // 530\nPacker.prototype.pack_int8 = function(num){                                                                            // 531\n  this.bufferBuilder.append(num & 0xff);                                                                               // 532\n}                                                                                                                      // 533\n                                                                                                                       // 534\nPacker.prototype.pack_int16 = function(num){                                                                           // 535\n  this.bufferBuilder.append((num & 0xff00) >> 8);                                                                      // 536\n  this.bufferBuilder.append(num & 0xff);                                                                               // 537\n}                                                                                                                      // 538\n                                                                                                                       // 539\nPacker.prototype.pack_int32 = function(num){                                                                           // 540\n  this.bufferBuilder.append((num >>> 24) & 0xff);                                                                      // 541\n  this.bufferBuilder.append((num & 0x00ff0000) >>> 16);                                                                // 542\n  this.bufferBuilder.append((num & 0x0000ff00) >>> 8);                                                                 // 543\n  this.bufferBuilder.append((num & 0x000000ff));                                                                       // 544\n}                                                                                                                      // 545\n                                                                                                                       // 546\nPacker.prototype.pack_int64 = function(num){                                                                           // 547\n  var high = Math.floor(num / Math.pow(2, 32));                                                                        // 548\n  var low  = num % Math.pow(2, 32);                                                                                    // 549\n  this.bufferBuilder.append((high & 0xff000000) >>> 24);                                                               // 550\n  this.bufferBuilder.append((high & 0x00ff0000) >>> 16);                                                               // 551\n  this.bufferBuilder.append((high & 0x0000ff00) >>>  8);                                                               // 552\n  this.bufferBuilder.append((high & 0x000000ff));                                                                      // 553\n  this.bufferBuilder.append((low  & 0xff000000) >>> 24);                                                               // 554\n  this.bufferBuilder.append((low  & 0x00ff0000) >>> 16);                                                               // 555\n  this.bufferBuilder.append((low  & 0x0000ff00) >>>  8);                                                               // 556\n  this.bufferBuilder.append((low  & 0x000000ff));                                                                      // 557\n}                                                                                                                      // 558\n                                                                                                                       // 559\nfunction _utf8Replace(m){                                                                                              // 560\n  var code = m.charCodeAt(0);                                                                                          // 561\n                                                                                                                       // 562\n  if(code <= 0x7ff) return '00';                                                                                       // 563\n  if(code <= 0xffff) return '000';                                                                                     // 564\n  if(code <= 0x1fffff) return '0000';                                                                                  // 565\n  if(code <= 0x3ffffff) return '00000';                                                                                // 566\n  return '000000';                                                                                                     // 567\n}                                                                                                                      // 568\n                                                                                                                       // 569\nfunction utf8Length(str){                                                                                              // 570\n  if (str.length > 600) {                                                                                              // 571\n    // Blob method faster for large strings                                                                            // 572\n    return (new Blob([str])).size;                                                                                     // 573\n  } else {                                                                                                             // 574\n    return str.replace(/[^\\u0000-\\u007F]/g, _utf8Replace).length;                                                      // 575\n  }                                                                                                                    // 576\n}                                                                                                                      // 577\n/**                                                                                                                    // 578\n * Light EventEmitter. Ported from Node.js/events.js                                                                   // 579\n * Eric Zhang                                                                                                          // 580\n */                                                                                                                    // 581\n                                                                                                                       // 582\n/**                                                                                                                    // 583\n * EventEmitter class                                                                                                  // 584\n * Creates an object with event registering and firing methods                                                         // 585\n */                                                                                                                    // 586\nfunction EventEmitter() {                                                                                              // 587\n  // Initialise required storage variables                                                                             // 588\n  this._events = {};                                                                                                   // 589\n}                                                                                                                      // 590\n                                                                                                                       // 591\nvar isArray = Array.isArray;                                                                                           // 592\n                                                                                                                       // 593\n                                                                                                                       // 594\nEventEmitter.prototype.addListener = function(type, listener, scope, once) {                                           // 595\n  if ('function' !== typeof listener) {                                                                                // 596\n    throw new Error('addListener only takes instances of Function');                                                   // 597\n  }                                                                                                                    // 598\n                                                                                                                       // 599\n  // To avoid recursion in the case that type == \"newListeners\"! Before                                                // 600\n  // adding it to the listeners, first emit \"newListeners\".                                                            // 601\n  this.emit('newListener', type, typeof listener.listener === 'function' ?                                             // 602\n            listener.listener : listener);                                                                             // 603\n                                                                                                                       // 604\n  if (!this._events[type]) {                                                                                           // 605\n    // Optimize the case of one listener. Don't need the extra array object.                                           // 606\n    this._events[type] = listener;                                                                                     // 607\n  } else if (isArray(this._events[type])) {                                                                            // 608\n                                                                                                                       // 609\n    // If we've already got an array, just append.                                                                     // 610\n    this._events[type].push(listener);                                                                                 // 611\n                                                                                                                       // 612\n  } else {                                                                                                             // 613\n    // Adding the second element, need to change to array.                                                             // 614\n    this._events[type] = [this._events[type], listener];                                                               // 615\n  }                                                                                                                    // 616\n  return this;                                                                                                         // 617\n};                                                                                                                     // 618\n                                                                                                                       // 619\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 620\n                                                                                                                       // 621\nEventEmitter.prototype.once = function(type, listener, scope) {                                                        // 622\n  if ('function' !== typeof listener) {                                                                                // 623\n    throw new Error('.once only takes instances of Function');                                                         // 624\n  }                                                                                                                    // 625\n                                                                                                                       // 626\n  var self = this;                                                                                                     // 627\n  function g() {                                                                                                       // 628\n    self.removeListener(type, g);                                                                                      // 629\n    listener.apply(this, arguments);                                                                                   // 630\n  };                                                                                                                   // 631\n                                                                                                                       // 632\n  g.listener = listener;                                                                                               // 633\n  self.on(type, g);                                                                                                    // 634\n                                                                                                                       // 635\n  return this;                                                                                                         // 636\n};                                                                                                                     // 637\n                                                                                                                       // 638\nEventEmitter.prototype.removeListener = function(type, listener, scope) {                                              // 639\n  if ('function' !== typeof listener) {                                                                                // 640\n    throw new Error('removeListener only takes instances of Function');                                                // 641\n  }                                                                                                                    // 642\n                                                                                                                       // 643\n  // does not use listeners(), so no side effect of creating _events[type]                                             // 644\n  if (!this._events[type]) return this;                                                                                // 645\n                                                                                                                       // 646\n  var list = this._events[type];                                                                                       // 647\n                                                                                                                       // 648\n  if (isArray(list)) {                                                                                                 // 649\n    var position = -1;                                                                                                 // 650\n    for (var i = 0, length = list.length; i < length; i++) {                                                           // 651\n      if (list[i] === listener ||                                                                                      // 652\n          (list[i].listener && list[i].listener === listener))                                                         // 653\n      {                                                                                                                // 654\n        position = i;                                                                                                  // 655\n        break;                                                                                                         // 656\n      }                                                                                                                // 657\n    }                                                                                                                  // 658\n                                                                                                                       // 659\n    if (position < 0) return this;                                                                                     // 660\n    list.splice(position, 1);                                                                                          // 661\n    if (list.length == 0)                                                                                              // 662\n      delete this._events[type];                                                                                       // 663\n  } else if (list === listener ||                                                                                      // 664\n             (list.listener && list.listener === listener))                                                            // 665\n  {                                                                                                                    // 666\n    delete this._events[type];                                                                                         // 667\n  }                                                                                                                    // 668\n                                                                                                                       // 669\n  return this;                                                                                                         // 670\n};                                                                                                                     // 671\n                                                                                                                       // 672\n                                                                                                                       // 673\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;                                                    // 674\n                                                                                                                       // 675\n                                                                                                                       // 676\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 677\n  if (arguments.length === 0) {                                                                                        // 678\n    this._events = {};                                                                                                 // 679\n    return this;                                                                                                       // 680\n  }                                                                                                                    // 681\n                                                                                                                       // 682\n  // does not use listeners(), so no side effect of creating _events[type]                                             // 683\n  if (type && this._events && this._events[type]) this._events[type] = null;                                           // 684\n  return this;                                                                                                         // 685\n};                                                                                                                     // 686\n                                                                                                                       // 687\nEventEmitter.prototype.listeners = function(type) {                                                                    // 688\n  if (!this._events[type]) this._events[type] = [];                                                                    // 689\n  if (!isArray(this._events[type])) {                                                                                  // 690\n    this._events[type] = [this._events[type]];                                                                         // 691\n  }                                                                                                                    // 692\n  return this._events[type];                                                                                           // 693\n};                                                                                                                     // 694\n                                                                                                                       // 695\nEventEmitter.prototype.emit = function(type) {                                                                         // 696\n  var type = arguments[0];                                                                                             // 697\n  var handler = this._events[type];                                                                                    // 698\n  if (!handler) return false;                                                                                          // 699\n                                                                                                                       // 700\n  if (typeof handler == 'function') {                                                                                  // 701\n    switch (arguments.length) {                                                                                        // 702\n      // fast cases                                                                                                    // 703\n      case 1:                                                                                                          // 704\n        handler.call(this);                                                                                            // 705\n        break;                                                                                                         // 706\n      case 2:                                                                                                          // 707\n        handler.call(this, arguments[1]);                                                                              // 708\n        break;                                                                                                         // 709\n      case 3:                                                                                                          // 710\n        handler.call(this, arguments[1], arguments[2]);                                                                // 711\n        break;                                                                                                         // 712\n      // slower                                                                                                        // 713\n      default:                                                                                                         // 714\n        var l = arguments.length;                                                                                      // 715\n        var args = new Array(l - 1);                                                                                   // 716\n        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];                                                        // 717\n        handler.apply(this, args);                                                                                     // 718\n    }                                                                                                                  // 719\n    return true;                                                                                                       // 720\n                                                                                                                       // 721\n  } else if (isArray(handler)) {                                                                                       // 722\n    var l = arguments.length;                                                                                          // 723\n    var args = new Array(l - 1);                                                                                       // 724\n    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];                                                            // 725\n                                                                                                                       // 726\n    var listeners = handler.slice();                                                                                   // 727\n    for (var i = 0, l = listeners.length; i < l; i++) {                                                                // 728\n      listeners[i].apply(this, args);                                                                                  // 729\n    }                                                                                                                  // 730\n    return true;                                                                                                       // 731\n  } else {                                                                                                             // 732\n    return false;                                                                                                      // 733\n  }                                                                                                                    // 734\n};                                                                                                                     // 735\n                                                                                                                       // 736\n                                                                                                                       // 737\n                                                                                                                       // 738\n/**                                                                                                                    // 739\n * Reliable transfer for Chrome Canary DataChannel impl.                                                               // 740\n * Author: @michellebu                                                                                                 // 741\n */                                                                                                                    // 742\nfunction Reliable(dc, debug) {                                                                                         // 743\n  if (!(this instanceof Reliable)) return new Reliable(dc);                                                            // 744\n  this._dc = dc;                                                                                                       // 745\n                                                                                                                       // 746\n  util.debug = debug;                                                                                                  // 747\n                                                                                                                       // 748\n  // Messages sent/received so far.                                                                                    // 749\n  // id: { ack: n, chunks: [...] }                                                                                     // 750\n  this._outgoing = {};                                                                                                 // 751\n  // id: { ack: ['ack', id, n], chunks: [...] }                                                                        // 752\n  this._incoming = {};                                                                                                 // 753\n  this._received = {};                                                                                                 // 754\n                                                                                                                       // 755\n  // Window size.                                                                                                      // 756\n  this._window = 1000;                                                                                                 // 757\n  // MTU.                                                                                                              // 758\n  this._mtu = 500;                                                                                                     // 759\n  // Interval for setInterval. In ms.                                                                                  // 760\n  this._interval = 0;                                                                                                  // 761\n                                                                                                                       // 762\n  // Messages sent.                                                                                                    // 763\n  this._count = 0;                                                                                                     // 764\n                                                                                                                       // 765\n  // Outgoing message queue.                                                                                           // 766\n  this._queue = [];                                                                                                    // 767\n                                                                                                                       // 768\n  this._setupDC();                                                                                                     // 769\n};                                                                                                                     // 770\n                                                                                                                       // 771\n// Send a message reliably.                                                                                            // 772\nReliable.prototype.send = function(msg) {                                                                              // 773\n  // Determine if chunking is necessary.                                                                               // 774\n  var bl = util.pack(msg);                                                                                             // 775\n  if (bl.size < this._mtu) {                                                                                           // 776\n    this._handleSend(['no', bl]);                                                                                      // 777\n    return;                                                                                                            // 778\n  }                                                                                                                    // 779\n                                                                                                                       // 780\n  this._outgoing[this._count] = {                                                                                      // 781\n    ack: 0,                                                                                                            // 782\n    chunks: this._chunk(bl)                                                                                            // 783\n  };                                                                                                                   // 784\n                                                                                                                       // 785\n  if (util.debug) {                                                                                                    // 786\n    this._outgoing[this._count].timer = new Date();                                                                    // 787\n  }                                                                                                                    // 788\n                                                                                                                       // 789\n  // Send prelim window.                                                                                               // 790\n  this._sendWindowedChunks(this._count);                                                                               // 791\n  this._count += 1;                                                                                                    // 792\n};                                                                                                                     // 793\n                                                                                                                       // 794\n// Set up interval for processing queue.                                                                               // 795\nReliable.prototype._setupInterval = function() {                                                                       // 796\n  // TODO: fail gracefully.                                                                                            // 797\n                                                                                                                       // 798\n  var self = this;                                                                                                     // 799\n  this._timeout = setInterval(function() {                                                                             // 800\n    // FIXME: String stuff makes things terribly async.                                                                // 801\n    var msg = self._queue.shift();                                                                                     // 802\n    if (msg._multiple) {                                                                                               // 803\n      for (var i = 0, ii = msg.length; i < ii; i += 1) {                                                               // 804\n        self._intervalSend(msg[i]);                                                                                    // 805\n      }                                                                                                                // 806\n    } else {                                                                                                           // 807\n      self._intervalSend(msg);                                                                                         // 808\n    }                                                                                                                  // 809\n  }, this._interval);                                                                                                  // 810\n};                                                                                                                     // 811\n                                                                                                                       // 812\nReliable.prototype._intervalSend = function(msg) {                                                                     // 813\n  var self = this;                                                                                                     // 814\n  msg = util.pack(msg);                                                                                                // 815\n  util.blobToBinaryString(msg, function(str) {                                                                         // 816\n    self._dc.send(str);                                                                                                // 817\n  });                                                                                                                  // 818\n  if (self._queue.length === 0) {                                                                                      // 819\n    clearTimeout(self._timeout);                                                                                       // 820\n    self._timeout = null;                                                                                              // 821\n    //self._processAcks();                                                                                             // 822\n  }                                                                                                                    // 823\n};                                                                                                                     // 824\n                                                                                                                       // 825\n// Go through ACKs to send missing pieces.                                                                             // 826\nReliable.prototype._processAcks = function() {                                                                         // 827\n  for (var id in this._outgoing) {                                                                                     // 828\n    if (this._outgoing.hasOwnProperty(id)) {                                                                           // 829\n      this._sendWindowedChunks(id);                                                                                    // 830\n    }                                                                                                                  // 831\n  }                                                                                                                    // 832\n};                                                                                                                     // 833\n                                                                                                                       // 834\n// Handle sending a message.                                                                                           // 835\n// FIXME: Don't wait for interval time for all messages...                                                             // 836\nReliable.prototype._handleSend = function(msg) {                                                                       // 837\n  var push = true;                                                                                                     // 838\n  for (var i = 0, ii = this._queue.length; i < ii; i += 1) {                                                           // 839\n    var item = this._queue[i];                                                                                         // 840\n    if (item === msg) {                                                                                                // 841\n      push = false;                                                                                                    // 842\n    } else if (item._multiple && item.indexOf(msg) !== -1) {                                                           // 843\n      push = false;                                                                                                    // 844\n    }                                                                                                                  // 845\n  }                                                                                                                    // 846\n  if (push) {                                                                                                          // 847\n    this._queue.push(msg);                                                                                             // 848\n    if (!this._timeout) {                                                                                              // 849\n      this._setupInterval();                                                                                           // 850\n    }                                                                                                                  // 851\n  }                                                                                                                    // 852\n};                                                                                                                     // 853\n                                                                                                                       // 854\n// Set up DataChannel handlers.                                                                                        // 855\nReliable.prototype._setupDC = function() {                                                                             // 856\n  // Handle various message types.                                                                                     // 857\n  var self = this;                                                                                                     // 858\n  this._dc.onmessage = function(e) {                                                                                   // 859\n    var msg = e.data;                                                                                                  // 860\n    var datatype = msg.constructor;                                                                                    // 861\n    // FIXME: msg is String until binary is supported.                                                                 // 862\n    // Once that happens, this will have to be smarter.                                                                // 863\n    if (datatype === String) {                                                                                         // 864\n      var ab = util.binaryStringToArrayBuffer(msg);                                                                    // 865\n      msg = util.unpack(ab);                                                                                           // 866\n      self._handleMessage(msg);                                                                                        // 867\n    }                                                                                                                  // 868\n  };                                                                                                                   // 869\n};                                                                                                                     // 870\n                                                                                                                       // 871\n// Handles an incoming message.                                                                                        // 872\nReliable.prototype._handleMessage = function(msg) {                                                                    // 873\n  var id = msg[1];                                                                                                     // 874\n  var idata = this._incoming[id];                                                                                      // 875\n  var odata = this._outgoing[id];                                                                                      // 876\n  var data;                                                                                                            // 877\n  switch (msg[0]) {                                                                                                    // 878\n    // No chunking was done.                                                                                           // 879\n    case 'no':                                                                                                         // 880\n      var message = id;                                                                                                // 881\n      if (!!message) {                                                                                                 // 882\n        this.onmessage(util.unpack(message));                                                                          // 883\n      }                                                                                                                // 884\n      break;                                                                                                           // 885\n    // Reached the end of the message.                                                                                 // 886\n    case 'end':                                                                                                        // 887\n      data = idata;                                                                                                    // 888\n                                                                                                                       // 889\n      // In case end comes first.                                                                                      // 890\n      this._received[id] = msg[2];                                                                                     // 891\n                                                                                                                       // 892\n      if (!data) {                                                                                                     // 893\n        break;                                                                                                         // 894\n      }                                                                                                                // 895\n                                                                                                                       // 896\n      this._ack(id);                                                                                                   // 897\n      break;                                                                                                           // 898\n    case 'ack':                                                                                                        // 899\n      data = odata;                                                                                                    // 900\n      if (!!data) {                                                                                                    // 901\n        var ack = msg[2];                                                                                              // 902\n        // Take the larger ACK, for out of order messages.                                                             // 903\n        data.ack = Math.max(ack, data.ack);                                                                            // 904\n                                                                                                                       // 905\n        // Clean up when all chunks are ACKed.                                                                         // 906\n        if (data.ack >= data.chunks.length) {                                                                          // 907\n          util.log('Time: ', new Date() - data.timer);                                                                 // 908\n          delete this._outgoing[id];                                                                                   // 909\n        } else {                                                                                                       // 910\n          this._processAcks();                                                                                         // 911\n        }                                                                                                              // 912\n      }                                                                                                                // 913\n      // If !data, just ignore.                                                                                        // 914\n      break;                                                                                                           // 915\n    // Received a chunk of data.                                                                                       // 916\n    case 'chunk':                                                                                                      // 917\n      // Create a new entry if none exists.                                                                            // 918\n      data = idata;                                                                                                    // 919\n      if (!data) {                                                                                                     // 920\n        var end = this._received[id];                                                                                  // 921\n        if (end === true) {                                                                                            // 922\n          break;                                                                                                       // 923\n        }                                                                                                              // 924\n        data = {                                                                                                       // 925\n          ack: ['ack', id, 0],                                                                                         // 926\n          chunks: []                                                                                                   // 927\n        };                                                                                                             // 928\n        this._incoming[id] = data;                                                                                     // 929\n      }                                                                                                                // 930\n                                                                                                                       // 931\n      var n = msg[2];                                                                                                  // 932\n      var chunk = msg[3];                                                                                              // 933\n      data.chunks[n] = new Uint8Array(chunk);                                                                          // 934\n                                                                                                                       // 935\n      // If we get the chunk we're looking for, ACK for next missing.                                                  // 936\n      // Otherwise, ACK the same N again.                                                                              // 937\n      if (n === data.ack[2]) {                                                                                         // 938\n        this._calculateNextAck(id);                                                                                    // 939\n      }                                                                                                                // 940\n      this._ack(id);                                                                                                   // 941\n      break;                                                                                                           // 942\n    default:                                                                                                           // 943\n      // Shouldn't happen, but would make sense for message to just go                                                 // 944\n      // through as is.                                                                                                // 945\n      this._handleSend(msg);                                                                                           // 946\n      break;                                                                                                           // 947\n  }                                                                                                                    // 948\n};                                                                                                                     // 949\n                                                                                                                       // 950\n// Chunks BL into smaller messages.                                                                                    // 951\nReliable.prototype._chunk = function(bl) {                                                                             // 952\n  var chunks = [];                                                                                                     // 953\n  var size = bl.size;                                                                                                  // 954\n  var start = 0;                                                                                                       // 955\n  while (start < size) {                                                                                               // 956\n    var end = Math.min(size, start + this._mtu);                                                                       // 957\n    var b = bl.slice(start, end);                                                                                      // 958\n    var chunk = {                                                                                                      // 959\n      payload: b                                                                                                       // 960\n    }                                                                                                                  // 961\n    chunks.push(chunk);                                                                                                // 962\n    start = end;                                                                                                       // 963\n  }                                                                                                                    // 964\n  util.log('Created', chunks.length, 'chunks.');                                                                       // 965\n  return chunks;                                                                                                       // 966\n};                                                                                                                     // 967\n                                                                                                                       // 968\n// Sends ACK N, expecting Nth blob chunk for message ID.                                                               // 969\nReliable.prototype._ack = function(id) {                                                                               // 970\n  var ack = this._incoming[id].ack;                                                                                    // 971\n                                                                                                                       // 972\n  // if ack is the end value, then call _complete.                                                                     // 973\n  if (this._received[id] === ack[2]) {                                                                                 // 974\n    this._complete(id);                                                                                                // 975\n    this._received[id] = true;                                                                                         // 976\n  }                                                                                                                    // 977\n                                                                                                                       // 978\n  this._handleSend(ack);                                                                                               // 979\n};                                                                                                                     // 980\n                                                                                                                       // 981\n// Calculates the next ACK number, given chunks.                                                                       // 982\nReliable.prototype._calculateNextAck = function(id) {                                                                  // 983\n  var data = this._incoming[id];                                                                                       // 984\n  var chunks = data.chunks;                                                                                            // 985\n  for (var i = 0, ii = chunks.length; i < ii; i += 1) {                                                                // 986\n    // This chunk is missing!!! Better ACK for it.                                                                     // 987\n    if (chunks[i] === undefined) {                                                                                     // 988\n      data.ack[2] = i;                                                                                                 // 989\n      return;                                                                                                          // 990\n    }                                                                                                                  // 991\n  }                                                                                                                    // 992\n  data.ack[2] = chunks.length;                                                                                         // 993\n};                                                                                                                     // 994\n                                                                                                                       // 995\n// Sends the next window of chunks.                                                                                    // 996\nReliable.prototype._sendWindowedChunks = function(id) {                                                                // 997\n  util.log('sendWindowedChunks for: ', id);                                                                            // 998\n  var data = this._outgoing[id];                                                                                       // 999\n  var ch = data.chunks;                                                                                                // 1000\n  var chunks = [];                                                                                                     // 1001\n  var limit = Math.min(data.ack + this._window, ch.length);                                                            // 1002\n  for (var i = data.ack; i < limit; i += 1) {                                                                          // 1003\n    if (!ch[i].sent || i === data.ack) {                                                                               // 1004\n      ch[i].sent = true;                                                                                               // 1005\n      chunks.push(['chunk', id, i, ch[i].payload]);                                                                    // 1006\n    }                                                                                                                  // 1007\n  }                                                                                                                    // 1008\n  if (data.ack + this._window >= ch.length) {                                                                          // 1009\n    chunks.push(['end', id, ch.length])                                                                                // 1010\n  }                                                                                                                    // 1011\n  chunks._multiple = true;                                                                                             // 1012\n  this._handleSend(chunks);                                                                                            // 1013\n};                                                                                                                     // 1014\n                                                                                                                       // 1015\n// Puts together a message from chunks.                                                                                // 1016\nReliable.prototype._complete = function(id) {                                                                          // 1017\n  util.log('Completed called for', id);                                                                                // 1018\n  var self = this;                                                                                                     // 1019\n  var chunks = this._incoming[id].chunks;                                                                              // 1020\n  var bl = new Blob(chunks);                                                                                           // 1021\n  util.blobToArrayBuffer(bl, function(ab) {                                                                            // 1022\n    self.onmessage(util.unpack(ab));                                                                                   // 1023\n  });                                                                                                                  // 1024\n  delete this._incoming[id];                                                                                           // 1025\n};                                                                                                                     // 1026\n                                                                                                                       // 1027\n// Ups bandwidth limit on SDP. Meant to be called during offer/answer.                                                 // 1028\nReliable.higherBandwidthSDP = function(sdp) {                                                                          // 1029\n  // AS stands for Application-Specific Maximum.                                                                       // 1030\n  // Bandwidth number is in kilobits / sec.                                                                            // 1031\n  // See RFC for more info: http://www.ietf.org/rfc/rfc2327.txt                                                        // 1032\n                                                                                                                       // 1033\n  // Chrome 31+ doesn't want us munging the SDP, so we'll let them have their                                          // 1034\n  // way.                                                                                                              // 1035\n  var version = navigator.appVersion.match(/Chrome\\/(.*?) /);                                                          // 1036\n  if (version) {                                                                                                       // 1037\n    version = parseInt(version[1].split('.').shift());                                                                 // 1038\n    if (version < 31) {                                                                                                // 1039\n      var parts = sdp.split('b=AS:30');                                                                                // 1040\n      var replace = 'b=AS:102400'; // 100 Mbps                                                                         // 1041\n      if (parts.length > 1) {                                                                                          // 1042\n        return parts[0] + replace + parts[1];                                                                          // 1043\n      }                                                                                                                // 1044\n    }                                                                                                                  // 1045\n  }                                                                                                                    // 1046\n                                                                                                                       // 1047\n  return sdp;                                                                                                          // 1048\n};                                                                                                                     // 1049\n                                                                                                                       // 1050\n// Overwritten, typically.                                                                                             // 1051\nReliable.prototype.onmessage = function(msg) {};                                                                       // 1052\n                                                                                                                       // 1053\nexports.Reliable = Reliable;                                                                                           // 1054\nexports.RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription;                       // 1055\nexports.RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection; // 1056\nexports.RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate;                                         // 1057\nvar defaultConfig = {'iceServers': [{ 'url': 'stun:stun.l.google.com:19302' }]};                                       // 1058\nvar dataCount = 1;                                                                                                     // 1059\n                                                                                                                       // 1060\nvar util = {                                                                                                           // 1061\n  noop: function() {},                                                                                                 // 1062\n                                                                                                                       // 1063\n  CLOUD_HOST: '0.peerjs.com',                                                                                          // 1064\n  CLOUD_PORT: 9000,                                                                                                    // 1065\n                                                                                                                       // 1066\n  // Browsers that need chunking:                                                                                      // 1067\n  chunkedBrowsers: {'Chrome': 1},                                                                                      // 1068\n  chunkedMTU: 16300, // The original 60000 bytes setting does not work when sending data from Firefox to Chrome, which is \"cut off\" after 16384 bytes and delivered individually.\n                                                                                                                       // 1070\n  // Logging logic                                                                                                     // 1071\n  logLevel: 0,                                                                                                         // 1072\n  setLogLevel: function(level) {                                                                                       // 1073\n    var debugLevel = parseInt(level, 10);                                                                              // 1074\n    if (!isNaN(parseInt(level, 10))) {                                                                                 // 1075\n      util.logLevel = debugLevel;                                                                                      // 1076\n    } else {                                                                                                           // 1077\n      // If they are using truthy/falsy values for debug                                                               // 1078\n      util.logLevel = level ? 3 : 0;                                                                                   // 1079\n    }                                                                                                                  // 1080\n    util.log = util.warn = util.error = util.noop;                                                                     // 1081\n    if (util.logLevel > 0) {                                                                                           // 1082\n      util.error = util._printWith('ERROR');                                                                           // 1083\n    }                                                                                                                  // 1084\n    if (util.logLevel > 1) {                                                                                           // 1085\n      util.warn = util._printWith('WARNING');                                                                          // 1086\n    }                                                                                                                  // 1087\n    if (util.logLevel > 2) {                                                                                           // 1088\n      util.log = util._print;                                                                                          // 1089\n    }                                                                                                                  // 1090\n  },                                                                                                                   // 1091\n  setLogFunction: function(fn) {                                                                                       // 1092\n    if (fn.constructor !== Function) {                                                                                 // 1093\n      util.warn('The log function you passed in is not a function. Defaulting to regular logs.');                      // 1094\n    } else {                                                                                                           // 1095\n      util._print = fn;                                                                                                // 1096\n    }                                                                                                                  // 1097\n  },                                                                                                                   // 1098\n                                                                                                                       // 1099\n  _printWith: function(prefix) {                                                                                       // 1100\n    return function() {                                                                                                // 1101\n      var copy = Array.prototype.slice.call(arguments);                                                                // 1102\n      copy.unshift(prefix);                                                                                            // 1103\n      util._print.apply(util, copy);                                                                                   // 1104\n    };                                                                                                                 // 1105\n  },                                                                                                                   // 1106\n  _print: function () {                                                                                                // 1107\n    var err = false;                                                                                                   // 1108\n    var copy = Array.prototype.slice.call(arguments);                                                                  // 1109\n    copy.unshift('PeerJS: ');                                                                                          // 1110\n    for (var i = 0, l = copy.length; i < l; i++){                                                                      // 1111\n      if (copy[i] instanceof Error) {                                                                                  // 1112\n        copy[i] = '(' + copy[i].name + ') ' + copy[i].message;                                                         // 1113\n        err = true;                                                                                                    // 1114\n      }                                                                                                                // 1115\n    }                                                                                                                  // 1116\n    err ? console.error.apply(console, copy) : console.log.apply(console, copy);                                       // 1117\n  },                                                                                                                   // 1118\n  //                                                                                                                   // 1119\n                                                                                                                       // 1120\n  // Returns browser-agnostic default config                                                                           // 1121\n  defaultConfig: defaultConfig,                                                                                        // 1122\n  //                                                                                                                   // 1123\n                                                                                                                       // 1124\n  // Returns the current browser.                                                                                      // 1125\n  browser: (function() {                                                                                               // 1126\n    if (window.mozRTCPeerConnection) {                                                                                 // 1127\n      return 'Firefox';                                                                                                // 1128\n    } else if (window.webkitRTCPeerConnection) {                                                                       // 1129\n      return 'Chrome';                                                                                                 // 1130\n    } else if (window.RTCPeerConnection) {                                                                             // 1131\n      return 'Supported';                                                                                              // 1132\n    } else {                                                                                                           // 1133\n      return 'Unsupported';                                                                                            // 1134\n    }                                                                                                                  // 1135\n  })(),                                                                                                                // 1136\n  //                                                                                                                   // 1137\n                                                                                                                       // 1138\n  // Lists which features are supported                                                                                // 1139\n  supports: (function() {                                                                                              // 1140\n    if (typeof RTCPeerConnection === 'undefined') {                                                                    // 1141\n      return {};                                                                                                       // 1142\n    }                                                                                                                  // 1143\n                                                                                                                       // 1144\n    var data = true;                                                                                                   // 1145\n    var audioVideo = true;                                                                                             // 1146\n                                                                                                                       // 1147\n    var binaryBlob = false;                                                                                            // 1148\n    var sctp = false;                                                                                                  // 1149\n    var onnegotiationneeded = !!window.webkitRTCPeerConnection;                                                        // 1150\n                                                                                                                       // 1151\n    var pc, dc;                                                                                                        // 1152\n    try {                                                                                                              // 1153\n      pc = new RTCPeerConnection(defaultConfig, {optional: [{RtpDataChannels: true}]});                                // 1154\n    } catch (e) {                                                                                                      // 1155\n      data = false;                                                                                                    // 1156\n      audioVideo = false;                                                                                              // 1157\n    }                                                                                                                  // 1158\n                                                                                                                       // 1159\n    if (data) {                                                                                                        // 1160\n      try {                                                                                                            // 1161\n        dc = pc.createDataChannel('_PEERJSTEST');                                                                      // 1162\n      } catch (e) {                                                                                                    // 1163\n        data = false;                                                                                                  // 1164\n      }                                                                                                                // 1165\n    }                                                                                                                  // 1166\n                                                                                                                       // 1167\n    if (data) {                                                                                                        // 1168\n      // Binary test                                                                                                   // 1169\n      try {                                                                                                            // 1170\n        dc.binaryType = 'blob';                                                                                        // 1171\n        binaryBlob = true;                                                                                             // 1172\n      } catch (e) {                                                                                                    // 1173\n      }                                                                                                                // 1174\n                                                                                                                       // 1175\n      // Reliable test.                                                                                                // 1176\n      // Unfortunately Chrome is a bit unreliable about whether or not they                                            // 1177\n      // support reliable.                                                                                             // 1178\n      var reliablePC = new RTCPeerConnection(defaultConfig, {});                                                       // 1179\n      try {                                                                                                            // 1180\n        var reliableDC = reliablePC.createDataChannel('_PEERJSRELIABLETEST', {});                                      // 1181\n        sctp = reliableDC.reliable;                                                                                    // 1182\n      } catch (e) {                                                                                                    // 1183\n      }                                                                                                                // 1184\n      reliablePC.close();                                                                                              // 1185\n    }                                                                                                                  // 1186\n                                                                                                                       // 1187\n    // FIXME: not really the best check...                                                                             // 1188\n    if (audioVideo) {                                                                                                  // 1189\n      audioVideo = !!pc.addStream;                                                                                     // 1190\n    }                                                                                                                  // 1191\n                                                                                                                       // 1192\n    // FIXME: this is not great because in theory it doesn't work for                                                  // 1193\n    // av-only browsers (?).                                                                                           // 1194\n    if (!onnegotiationneeded && data) {                                                                                // 1195\n      // sync default check.                                                                                           // 1196\n      var negotiationPC = new RTCPeerConnection(defaultConfig, {optional: [{RtpDataChannels: true}]});                 // 1197\n      negotiationPC.onnegotiationneeded = function() {                                                                 // 1198\n        onnegotiationneeded = true;                                                                                    // 1199\n        // async check.                                                                                                // 1200\n        if (util && util.supports) {                                                                                   // 1201\n          util.supports.onnegotiationneeded = true;                                                                    // 1202\n        }                                                                                                              // 1203\n      };                                                                                                               // 1204\n      var negotiationDC = negotiationPC.createDataChannel('_PEERJSNEGOTIATIONTEST');                                   // 1205\n                                                                                                                       // 1206\n      setTimeout(function() {                                                                                          // 1207\n        negotiationPC.close();                                                                                         // 1208\n      }, 1000);                                                                                                        // 1209\n    }                                                                                                                  // 1210\n                                                                                                                       // 1211\n    if (pc) {                                                                                                          // 1212\n      pc.close();                                                                                                      // 1213\n    }                                                                                                                  // 1214\n                                                                                                                       // 1215\n    return {                                                                                                           // 1216\n      audioVideo: audioVideo,                                                                                          // 1217\n      data: data,                                                                                                      // 1218\n      binaryBlob: binaryBlob,                                                                                          // 1219\n      binary: sctp, // deprecated; sctp implies binary support.                                                        // 1220\n      reliable: sctp, // deprecated; sctp implies reliable data.                                                       // 1221\n      sctp: sctp,                                                                                                      // 1222\n      onnegotiationneeded: onnegotiationneeded                                                                         // 1223\n    };                                                                                                                 // 1224\n  }()),                                                                                                                // 1225\n  //                                                                                                                   // 1226\n                                                                                                                       // 1227\n  // Ensure alphanumeric ids                                                                                           // 1228\n  validateId: function(id) {                                                                                           // 1229\n    // Allow empty ids                                                                                                 // 1230\n    return !id || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(id);                                                     // 1231\n  },                                                                                                                   // 1232\n                                                                                                                       // 1233\n  validateKey: function(key) {                                                                                         // 1234\n    // Allow empty keys                                                                                                // 1235\n    return !key || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(key);                                                   // 1236\n  },                                                                                                                   // 1237\n                                                                                                                       // 1238\n                                                                                                                       // 1239\n  debug: false,                                                                                                        // 1240\n                                                                                                                       // 1241\n  inherits: function(ctor, superCtor) {                                                                                // 1242\n    ctor.super_ = superCtor;                                                                                           // 1243\n    ctor.prototype = Object.create(superCtor.prototype, {                                                              // 1244\n      constructor: {                                                                                                   // 1245\n        value: ctor,                                                                                                   // 1246\n        enumerable: false,                                                                                             // 1247\n        writable: true,                                                                                                // 1248\n        configurable: true                                                                                             // 1249\n      }                                                                                                                // 1250\n    });                                                                                                                // 1251\n  },                                                                                                                   // 1252\n  extend: function(dest, source) {                                                                                     // 1253\n    for(var key in source) {                                                                                           // 1254\n      if(source.hasOwnProperty(key)) {                                                                                 // 1255\n        dest[key] = source[key];                                                                                       // 1256\n      }                                                                                                                // 1257\n    }                                                                                                                  // 1258\n    return dest;                                                                                                       // 1259\n  },                                                                                                                   // 1260\n  pack: BinaryPack.pack,                                                                                               // 1261\n  unpack: BinaryPack.unpack,                                                                                           // 1262\n                                                                                                                       // 1263\n  log: function () {                                                                                                   // 1264\n    if (util.debug) {                                                                                                  // 1265\n      var err = false;                                                                                                 // 1266\n      var copy = Array.prototype.slice.call(arguments);                                                                // 1267\n      copy.unshift('PeerJS: ');                                                                                        // 1268\n      for (var i = 0, l = copy.length; i < l; i++){                                                                    // 1269\n        if (copy[i] instanceof Error) {                                                                                // 1270\n          copy[i] = '(' + copy[i].name + ') ' + copy[i].message;                                                       // 1271\n          err = true;                                                                                                  // 1272\n        }                                                                                                              // 1273\n      }                                                                                                                // 1274\n      err ? console.error.apply(console, copy) : console.log.apply(console, copy);                                     // 1275\n    }                                                                                                                  // 1276\n  },                                                                                                                   // 1277\n                                                                                                                       // 1278\n  setZeroTimeout: (function(global) {                                                                                  // 1279\n    var timeouts = [];                                                                                                 // 1280\n    var messageName = 'zero-timeout-message';                                                                          // 1281\n                                                                                                                       // 1282\n    // Like setTimeout, but only takes a function argument.\t There's                                                   // 1283\n    // no time argument (always zero) and no arguments (you have to                                                    // 1284\n    // use a closure).                                                                                                 // 1285\n    function setZeroTimeoutPostMessage(fn) {                                                                           // 1286\n      timeouts.push(fn);                                                                                               // 1287\n      global.postMessage(messageName, '*');                                                                            // 1288\n    }                                                                                                                  // 1289\n                                                                                                                       // 1290\n    function handleMessage(event) {                                                                                    // 1291\n      if (event.source == global && event.data == messageName) {                                                       // 1292\n        if (event.stopPropagation) {                                                                                   // 1293\n          event.stopPropagation();                                                                                     // 1294\n        }                                                                                                              // 1295\n        if (timeouts.length) {                                                                                         // 1296\n          timeouts.shift()();                                                                                          // 1297\n        }                                                                                                              // 1298\n      }                                                                                                                // 1299\n    }                                                                                                                  // 1300\n    if (global.addEventListener) {                                                                                     // 1301\n      global.addEventListener('message', handleMessage, true);                                                         // 1302\n    } else if (global.attachEvent) {                                                                                   // 1303\n      global.attachEvent('onmessage', handleMessage);                                                                  // 1304\n    }                                                                                                                  // 1305\n    return setZeroTimeoutPostMessage;                                                                                  // 1306\n  }(this)),                                                                                                            // 1307\n                                                                                                                       // 1308\n  // Binary stuff                                                                                                      // 1309\n                                                                                                                       // 1310\n  // chunks a blob.                                                                                                    // 1311\n  chunk: function(bl) {                                                                                                // 1312\n    var chunks = [];                                                                                                   // 1313\n    var size = bl.size;                                                                                                // 1314\n    var start = index = 0;                                                                                             // 1315\n    var total = Math.ceil(size / util.chunkedMTU);                                                                     // 1316\n    while (start < size) {                                                                                             // 1317\n      var end = Math.min(size, start + util.chunkedMTU);                                                               // 1318\n      var b = bl.slice(start, end);                                                                                    // 1319\n                                                                                                                       // 1320\n      var chunk = {                                                                                                    // 1321\n        __peerData: dataCount,                                                                                         // 1322\n        n: index,                                                                                                      // 1323\n        data: b,                                                                                                       // 1324\n        total: total                                                                                                   // 1325\n      };                                                                                                               // 1326\n                                                                                                                       // 1327\n      chunks.push(chunk);                                                                                              // 1328\n                                                                                                                       // 1329\n      start = end;                                                                                                     // 1330\n      index += 1;                                                                                                      // 1331\n    }                                                                                                                  // 1332\n    dataCount += 1;                                                                                                    // 1333\n    return chunks;                                                                                                     // 1334\n  },                                                                                                                   // 1335\n                                                                                                                       // 1336\n  blobToArrayBuffer: function(blob, cb){                                                                               // 1337\n    var fr = new FileReader();                                                                                         // 1338\n    fr.onload = function(evt) {                                                                                        // 1339\n      cb(evt.target.result);                                                                                           // 1340\n    };                                                                                                                 // 1341\n    fr.readAsArrayBuffer(blob);                                                                                        // 1342\n  },                                                                                                                   // 1343\n  blobToBinaryString: function(blob, cb){                                                                              // 1344\n    var fr = new FileReader();                                                                                         // 1345\n    fr.onload = function(evt) {                                                                                        // 1346\n      cb(evt.target.result);                                                                                           // 1347\n    };                                                                                                                 // 1348\n    fr.readAsBinaryString(blob);                                                                                       // 1349\n  },                                                                                                                   // 1350\n  binaryStringToArrayBuffer: function(binary) {                                                                        // 1351\n    var byteArray = new Uint8Array(binary.length);                                                                     // 1352\n    for (var i = 0; i < binary.length; i++) {                                                                          // 1353\n      byteArray[i] = binary.charCodeAt(i) & 0xff;                                                                      // 1354\n    }                                                                                                                  // 1355\n    return byteArray.buffer;                                                                                           // 1356\n  },                                                                                                                   // 1357\n  randomToken: function () {                                                                                           // 1358\n    return Math.random().toString(36).substr(2);                                                                       // 1359\n  },                                                                                                                   // 1360\n  //                                                                                                                   // 1361\n                                                                                                                       // 1362\n  isSecure: function() {                                                                                               // 1363\n    return location.protocol === 'https:';                                                                             // 1364\n  }                                                                                                                    // 1365\n};                                                                                                                     // 1366\n                                                                                                                       // 1367\nexports.util = util;                                                                                                   // 1368\n/**                                                                                                                    // 1369\n * A peer who can initiate connections with other peers.                                                               // 1370\n */                                                                                                                    // 1371\nfunction Peer(id, options) {                                                                                           // 1372\n  if (!(this instanceof Peer)) return new Peer(id, options);                                                           // 1373\n  EventEmitter.call(this);                                                                                             // 1374\n                                                                                                                       // 1375\n  // Deal with overloading                                                                                             // 1376\n  if (id && id.constructor == Object) {                                                                                // 1377\n    options = id;                                                                                                      // 1378\n    id = undefined;                                                                                                    // 1379\n  } else if (id) {                                                                                                     // 1380\n    // Ensure id is a string                                                                                           // 1381\n    id = id.toString();                                                                                                // 1382\n  }                                                                                                                    // 1383\n  //                                                                                                                   // 1384\n                                                                                                                       // 1385\n  // Configurize options                                                                                               // 1386\n  options = util.extend({                                                                                              // 1387\n    debug: 0, // 1: Errors, 2: Warnings, 3: All logs                                                                   // 1388\n    host: util.CLOUD_HOST,                                                                                             // 1389\n    port: util.CLOUD_PORT,                                                                                             // 1390\n    key: 'peerjs',                                                                                                     // 1391\n    path: '/',                                                                                                         // 1392\n    token: util.randomToken(),                                                                                         // 1393\n    config: util.defaultConfig                                                                                         // 1394\n  }, options);                                                                                                         // 1395\n  this.options = options;                                                                                              // 1396\n  // Detect relative URL host.                                                                                         // 1397\n  if (options.host === '/') {                                                                                          // 1398\n    options.host = window.location.hostname;                                                                           // 1399\n  }                                                                                                                    // 1400\n  // Set path correctly.                                                                                               // 1401\n  if (options.path[0] !== '/') {                                                                                       // 1402\n    options.path = '/' + options.path;                                                                                 // 1403\n  }                                                                                                                    // 1404\n  if (options.path[options.path.length - 1] !== '/') {                                                                 // 1405\n    options.path += '/';                                                                                               // 1406\n  }                                                                                                                    // 1407\n                                                                                                                       // 1408\n  // Set whether we use SSL to same as current host                                                                    // 1409\n  if (options.secure === undefined && options.host !== util.CLOUD_HOST) {                                              // 1410\n    options.secure = util.isSecure();                                                                                  // 1411\n  }                                                                                                                    // 1412\n  // Set a custom log function if present                                                                              // 1413\n  if (options.logFunction) {                                                                                           // 1414\n    util.setLogFunction(options.logFunction);                                                                          // 1415\n  }                                                                                                                    // 1416\n  util.setLogLevel(options.debug);                                                                                     // 1417\n  //                                                                                                                   // 1418\n                                                                                                                       // 1419\n  // Sanity checks                                                                                                     // 1420\n  // Ensure WebRTC supported                                                                                           // 1421\n  if (!util.supports.audioVideo && !util.supports.data ) {                                                             // 1422\n    this._delayedAbort('browser-incompatible', 'The current browser does not support WebRTC');                         // 1423\n    return;                                                                                                            // 1424\n  }                                                                                                                    // 1425\n  // Ensure alphanumeric id                                                                                            // 1426\n  if (!util.validateId(id)) {                                                                                          // 1427\n    this._delayedAbort('invalid-id', 'ID \"' + id + '\" is invalid');                                                    // 1428\n    return;                                                                                                            // 1429\n  }                                                                                                                    // 1430\n  // Ensure valid key                                                                                                  // 1431\n  if (!util.validateKey(options.key)) {                                                                                // 1432\n    this._delayedAbort('invalid-key', 'API KEY \"' + options.key + '\" is invalid');                                     // 1433\n    return;                                                                                                            // 1434\n  }                                                                                                                    // 1435\n  // Ensure not using unsecure cloud server on SSL page                                                                // 1436\n  if (options.secure && options.host === '0.peerjs.com') {                                                             // 1437\n    this._delayedAbort('ssl-unavailable',                                                                              // 1438\n      'The cloud server currently does not support HTTPS. Please run your own PeerServer to use HTTPS.');              // 1439\n    return;                                                                                                            // 1440\n  }                                                                                                                    // 1441\n  //                                                                                                                   // 1442\n                                                                                                                       // 1443\n  // States.                                                                                                           // 1444\n  this.destroyed = false; // Connections have been killed                                                              // 1445\n  this.disconnected = false; // Connection to PeerServer killed but P2P connections still active                       // 1446\n  this.open = false; // Sockets and such are not yet open.                                                             // 1447\n  //                                                                                                                   // 1448\n                                                                                                                       // 1449\n  // References                                                                                                        // 1450\n  this.connections = {}; // DataConnections for this peer.                                                             // 1451\n  this._lostMessages = {}; // src => [list of messages]                                                                // 1452\n  //                                                                                                                   // 1453\n                                                                                                                       // 1454\n  // Start the server connection                                                                                       // 1455\n  this._initializeServerConnection();                                                                                  // 1456\n  if (id) {                                                                                                            // 1457\n    this._initialize(id);                                                                                              // 1458\n  } else {                                                                                                             // 1459\n    this._retrieveId();                                                                                                // 1460\n  }                                                                                                                    // 1461\n  //                                                                                                                   // 1462\n};                                                                                                                     // 1463\n                                                                                                                       // 1464\nutil.inherits(Peer, EventEmitter);                                                                                     // 1465\n                                                                                                                       // 1466\n// Initialize the 'socket' (which is actually a mix of XHR streaming and                                               // 1467\n// websockets.)                                                                                                        // 1468\nPeer.prototype._initializeServerConnection = function() {                                                              // 1469\n  var self = this;                                                                                                     // 1470\n  this.socket = new Socket(this.options.secure, this.options.host, this.options.port, this.options.path, this.options.key);\n  this.socket.on('message', function(data) {                                                                           // 1472\n    self._handleMessage(data);                                                                                         // 1473\n  });                                                                                                                  // 1474\n  this.socket.on('error', function(error) {                                                                            // 1475\n    self._abort('socket-error', error);                                                                                // 1476\n  });                                                                                                                  // 1477\n  this.socket.on('disconnected', function() {                                                                          // 1478\n    // If we haven't explicitly disconnected, emit error and disconnect.                                               // 1479\n    if (!self.disconnected) {                                                                                          // 1480\n      self.emitError('network', 'Lost connection to server.')                                                          // 1481\n      self.disconnect();                                                                                               // 1482\n    }                                                                                                                  // 1483\n  });                                                                                                                  // 1484\n  this.socket.on('close', function() {                                                                                 // 1485\n    // If we haven't explicitly disconnected, emit error.                                                              // 1486\n    if (!self.disconnected) {                                                                                          // 1487\n      self._abort('socket-closed', 'Underlying socket is already closed.');                                            // 1488\n    }                                                                                                                  // 1489\n  });                                                                                                                  // 1490\n};                                                                                                                     // 1491\n                                                                                                                       // 1492\n/** Get a unique ID from the server via XHR. */                                                                        // 1493\nPeer.prototype._retrieveId = function(cb) {                                                                            // 1494\n  var self = this;                                                                                                     // 1495\n  var http = new XMLHttpRequest();                                                                                     // 1496\n  var protocol = this.options.secure ? 'https://' : 'http://';                                                         // 1497\n  var url = protocol + this.options.host + ':' + this.options.port                                                     // 1498\n    + this.options.path + this.options.key + '/id';                                                                    // 1499\n  var queryString = '?ts=' + new Date().getTime() + '' + Math.random();                                                // 1500\n  url += queryString;                                                                                                  // 1501\n                                                                                                                       // 1502\n  // If there's no ID we need to wait for one before trying to init socket.                                            // 1503\n  http.open('get', url, true);                                                                                         // 1504\n  http.onerror = function(e) {                                                                                         // 1505\n    util.error('Error retrieving ID', e);                                                                              // 1506\n    var pathError = '';                                                                                                // 1507\n    if (self.options.path === '/' && self.options.host !== util.CLOUD_HOST) {                                          // 1508\n      pathError = ' If you passed in a `path` to your self-hosted PeerServer, '                                        // 1509\n        + 'you\\'ll also need to pass in that same path when creating a new'                                            // 1510\n        + ' Peer.';                                                                                                    // 1511\n    }                                                                                                                  // 1512\n    self._abort('server-error', 'Could not get an ID from the server.' + pathError);                                   // 1513\n  }                                                                                                                    // 1514\n  http.onreadystatechange = function() {                                                                               // 1515\n    if (http.readyState !== 4) {                                                                                       // 1516\n      return;                                                                                                          // 1517\n    }                                                                                                                  // 1518\n    if (http.status !== 200) {                                                                                         // 1519\n      http.onerror();                                                                                                  // 1520\n      return;                                                                                                          // 1521\n    }                                                                                                                  // 1522\n    self._initialize(http.responseText);                                                                               // 1523\n  };                                                                                                                   // 1524\n  http.send(null);                                                                                                     // 1525\n};                                                                                                                     // 1526\n                                                                                                                       // 1527\n/** Initialize a connection with the server. */                                                                        // 1528\nPeer.prototype._initialize = function(id) {                                                                            // 1529\n  this.id = id;                                                                                                        // 1530\n  this.socket.start(this.id, this.options.token);                                                                      // 1531\n}                                                                                                                      // 1532\n                                                                                                                       // 1533\n/** Handles messages from the server. */                                                                               // 1534\nPeer.prototype._handleMessage = function(message) {                                                                    // 1535\n  var type = message.type;                                                                                             // 1536\n  var payload = message.payload;                                                                                       // 1537\n  var peer = message.src;                                                                                              // 1538\n                                                                                                                       // 1539\n  switch (type) {                                                                                                      // 1540\n    case 'OPEN': // The connection to the server is open.                                                              // 1541\n      this.emit('open', this.id);                                                                                      // 1542\n      this.open = true;                                                                                                // 1543\n      break;                                                                                                           // 1544\n    case 'ERROR': // Server error.                                                                                     // 1545\n      this._abort('server-error', payload.msg);                                                                        // 1546\n      break;                                                                                                           // 1547\n    case 'ID-TAKEN': // The selected ID is taken.                                                                      // 1548\n      this._abort('unavailable-id', 'ID `' + this.id + '` is taken');                                                  // 1549\n      break;                                                                                                           // 1550\n    case 'INVALID-KEY': // The given API key cannot be found.                                                          // 1551\n      this._abort('invalid-key', 'API KEY \"' + this.options.key + '\" is invalid');                                     // 1552\n      break;                                                                                                           // 1553\n                                                                                                                       // 1554\n    //                                                                                                                 // 1555\n    case 'LEAVE': // Another peer has closed its connection to this peer.                                              // 1556\n      util.log('Received leave message from', peer);                                                                   // 1557\n      this._cleanupPeer(peer);                                                                                         // 1558\n      break;                                                                                                           // 1559\n                                                                                                                       // 1560\n    case 'EXPIRE': // The offer sent to a peer has expired without response.                                           // 1561\n      this.emitError('peer-unavailable', 'Could not connect to peer ' + peer);                                         // 1562\n      break;                                                                                                           // 1563\n    case 'OFFER': // we should consider switching this to CALL/CONNECT, but this is the least breaking option.         // 1564\n      var connectionId = payload.connectionId;                                                                         // 1565\n      var connection = this.getConnection(peer, connectionId);                                                         // 1566\n                                                                                                                       // 1567\n      if (connection) {                                                                                                // 1568\n        util.warn('Offer received for existing Connection ID:', connectionId);                                         // 1569\n        //connection.handleMessage(message);                                                                           // 1570\n      } else {                                                                                                         // 1571\n        // Create a new connection.                                                                                    // 1572\n        if (payload.type === 'media') {                                                                                // 1573\n          var connection = new MediaConnection(peer, this, {                                                           // 1574\n            connectionId: connectionId,                                                                                // 1575\n            _payload: payload,                                                                                         // 1576\n            metadata: payload.metadata                                                                                 // 1577\n          });                                                                                                          // 1578\n          this._addConnection(peer, connection);                                                                       // 1579\n          this.emit('call', connection);                                                                               // 1580\n        } else if (payload.type === 'data') {                                                                          // 1581\n          connection = new DataConnection(peer, this, {                                                                // 1582\n            connectionId: connectionId,                                                                                // 1583\n            _payload: payload,                                                                                         // 1584\n            metadata: payload.metadata,                                                                                // 1585\n            label: payload.label,                                                                                      // 1586\n            serialization: payload.serialization,                                                                      // 1587\n            reliable: payload.reliable                                                                                 // 1588\n          });                                                                                                          // 1589\n          this._addConnection(peer, connection);                                                                       // 1590\n          this.emit('connection', connection);                                                                         // 1591\n        } else {                                                                                                       // 1592\n          util.warn('Received malformed connection type:', payload.type);                                              // 1593\n          return;                                                                                                      // 1594\n        }                                                                                                              // 1595\n        // Find messages.                                                                                              // 1596\n        var messages = this._getMessages(connectionId);                                                                // 1597\n        for (var i = 0, ii = messages.length; i < ii; i += 1) {                                                        // 1598\n          connection.handleMessage(messages[i]);                                                                       // 1599\n        }                                                                                                              // 1600\n      }                                                                                                                // 1601\n      break;                                                                                                           // 1602\n    default:                                                                                                           // 1603\n      if (!payload) {                                                                                                  // 1604\n        util.warn('You received a malformed message from ' + peer + ' of type ' + type);                               // 1605\n        return;                                                                                                        // 1606\n      }                                                                                                                // 1607\n                                                                                                                       // 1608\n      var id = payload.connectionId;                                                                                   // 1609\n      var connection = this.getConnection(peer, id);                                                                   // 1610\n                                                                                                                       // 1611\n      if (connection && connection.pc) {                                                                               // 1612\n        // Pass it on.                                                                                                 // 1613\n        connection.handleMessage(message);                                                                             // 1614\n      } else if (id) {                                                                                                 // 1615\n        // Store for possible later use                                                                                // 1616\n        this._storeMessage(id, message);                                                                               // 1617\n      } else {                                                                                                         // 1618\n        util.warn('You received an unrecognized message:', message);                                                   // 1619\n      }                                                                                                                // 1620\n      break;                                                                                                           // 1621\n  }                                                                                                                    // 1622\n}                                                                                                                      // 1623\n                                                                                                                       // 1624\n/** Stores messages without a set up connection, to be claimed later. */                                               // 1625\nPeer.prototype._storeMessage = function(connectionId, message) {                                                       // 1626\n  if (!this._lostMessages[connectionId]) {                                                                             // 1627\n    this._lostMessages[connectionId] = [];                                                                             // 1628\n  }                                                                                                                    // 1629\n  this._lostMessages[connectionId].push(message);                                                                      // 1630\n}                                                                                                                      // 1631\n                                                                                                                       // 1632\n/** Retrieve messages from lost message store */                                                                       // 1633\nPeer.prototype._getMessages = function(connectionId) {                                                                 // 1634\n  var messages = this._lostMessages[connectionId];                                                                     // 1635\n  if (messages) {                                                                                                      // 1636\n    delete this._lostMessages[connectionId];                                                                           // 1637\n    return messages;                                                                                                   // 1638\n  } else {                                                                                                             // 1639\n    return [];                                                                                                         // 1640\n  }                                                                                                                    // 1641\n}                                                                                                                      // 1642\n                                                                                                                       // 1643\n/**                                                                                                                    // 1644\n * Returns a DataConnection to the specified peer. See documentation for a                                             // 1645\n * complete list of options.                                                                                           // 1646\n */                                                                                                                    // 1647\nPeer.prototype.connect = function(peer, options) {                                                                     // 1648\n  if (this.disconnected) {                                                                                             // 1649\n    util.warn('You cannot connect to a new Peer because you called '                                                   // 1650\n        + '.disconnect() on this Peer and ended your connection with the'                                              // 1651\n        + ' server. You can create a new Peer to reconnect, or call reconnect'                                         // 1652\n        + ' on this peer if you believe its ID to still be available.');                                               // 1653\n    this.emitError('disconnected', 'Cannot connect to new Peer after disconnecting from server.');                     // 1654\n    return;                                                                                                            // 1655\n  }                                                                                                                    // 1656\n  var connection = new DataConnection(peer, this, options);                                                            // 1657\n  this._addConnection(peer, connection);                                                                               // 1658\n  return connection;                                                                                                   // 1659\n}                                                                                                                      // 1660\n                                                                                                                       // 1661\n/**                                                                                                                    // 1662\n * Returns a MediaConnection to the specified peer. See documentation for a                                            // 1663\n * complete list of options.                                                                                           // 1664\n */                                                                                                                    // 1665\nPeer.prototype.call = function(peer, stream, options) {                                                                // 1666\n  if (this.disconnected) {                                                                                             // 1667\n    util.warn('You cannot connect to a new Peer because you called '                                                   // 1668\n        + '.disconnect() on this Peer and ended your connection with the'                                              // 1669\n        + ' server. You can create a new Peer to reconnect.');                                                         // 1670\n    this.emitError('disconnected', 'Cannot connect to new Peer after disconnecting from server.');                     // 1671\n    return;                                                                                                            // 1672\n  }                                                                                                                    // 1673\n  if (!stream) {                                                                                                       // 1674\n    util.error('To call a peer, you must provide a stream from your browser\\'s `getUserMedia`.');                      // 1675\n    return;                                                                                                            // 1676\n  }                                                                                                                    // 1677\n  options = options || {};                                                                                             // 1678\n  options._stream = stream;                                                                                            // 1679\n  var call = new MediaConnection(peer, this, options);                                                                 // 1680\n  this._addConnection(peer, call);                                                                                     // 1681\n  return call;                                                                                                         // 1682\n}                                                                                                                      // 1683\n                                                                                                                       // 1684\n/** Add a data/media connection to this peer. */                                                                       // 1685\nPeer.prototype._addConnection = function(peer, connection) {                                                           // 1686\n  if (!this.connections[peer]) {                                                                                       // 1687\n    this.connections[peer] = [];                                                                                       // 1688\n  }                                                                                                                    // 1689\n  this.connections[peer].push(connection);                                                                             // 1690\n}                                                                                                                      // 1691\n                                                                                                                       // 1692\n/** Retrieve a data/media connection for this peer. */                                                                 // 1693\nPeer.prototype.getConnection = function(peer, id) {                                                                    // 1694\n  var connections = this.connections[peer];                                                                            // 1695\n  if (!connections) {                                                                                                  // 1696\n    return null;                                                                                                       // 1697\n  }                                                                                                                    // 1698\n  for (var i = 0, ii = connections.length; i < ii; i++) {                                                              // 1699\n    if (connections[i].id === id) {                                                                                    // 1700\n      return connections[i];                                                                                           // 1701\n    }                                                                                                                  // 1702\n  }                                                                                                                    // 1703\n  return null;                                                                                                         // 1704\n}                                                                                                                      // 1705\n                                                                                                                       // 1706\nPeer.prototype._delayedAbort = function(type, message) {                                                               // 1707\n  var self = this;                                                                                                     // 1708\n  util.setZeroTimeout(function(){                                                                                      // 1709\n    self._abort(type, message);                                                                                        // 1710\n  });                                                                                                                  // 1711\n}                                                                                                                      // 1712\n                                                                                                                       // 1713\n/**                                                                                                                    // 1714\n * Destroys the Peer and emits an error message.                                                                       // 1715\n * The Peer is not destroyed if it's in a disconnected state, in which case                                            // 1716\n * it retains its disconnected state and its existing connections.                                                     // 1717\n */                                                                                                                    // 1718\nPeer.prototype._abort = function(type, message) {                                                                      // 1719\n  util.error('Aborting!');                                                                                             // 1720\n  if (!this._lastServerId) {                                                                                           // 1721\n    this.destroy();                                                                                                    // 1722\n  } else {                                                                                                             // 1723\n    this.disconnect();                                                                                                 // 1724\n  }                                                                                                                    // 1725\n  this.emitError(type, message);                                                                                       // 1726\n};                                                                                                                     // 1727\n                                                                                                                       // 1728\n/** Emits a typed error message. */                                                                                    // 1729\nPeer.prototype.emitError = function(type, err) {                                                                       // 1730\n  util.error('Error:', err);                                                                                           // 1731\n  if (typeof err === 'string') {                                                                                       // 1732\n    err = new Error(err);                                                                                              // 1733\n  }                                                                                                                    // 1734\n  err.type = type;                                                                                                     // 1735\n  this.emit('error', err);                                                                                             // 1736\n};                                                                                                                     // 1737\n                                                                                                                       // 1738\n/**                                                                                                                    // 1739\n * Destroys the Peer: closes all active connections as well as the connection                                          // 1740\n *  to the server.                                                                                                     // 1741\n * Warning: The peer can no longer create or accept connections after being                                            // 1742\n *  destroyed.                                                                                                         // 1743\n */                                                                                                                    // 1744\nPeer.prototype.destroy = function() {                                                                                  // 1745\n  if (!this.destroyed) {                                                                                               // 1746\n    this._cleanup();                                                                                                   // 1747\n    this.disconnect();                                                                                                 // 1748\n    this.destroyed = true;                                                                                             // 1749\n  }                                                                                                                    // 1750\n}                                                                                                                      // 1751\n                                                                                                                       // 1752\n                                                                                                                       // 1753\n/** Disconnects every connection on this peer. */                                                                      // 1754\nPeer.prototype._cleanup = function() {                                                                                 // 1755\n  if (this.connections) {                                                                                              // 1756\n    var peers = Object.keys(this.connections);                                                                         // 1757\n    for (var i = 0, ii = peers.length; i < ii; i++) {                                                                  // 1758\n      this._cleanupPeer(peers[i]);                                                                                     // 1759\n    }                                                                                                                  // 1760\n  }                                                                                                                    // 1761\n  this.emit('close');                                                                                                  // 1762\n}                                                                                                                      // 1763\n                                                                                                                       // 1764\n/** Closes all connections to this peer. */                                                                            // 1765\nPeer.prototype._cleanupPeer = function(peer) {                                                                         // 1766\n  var connections = this.connections[peer];                                                                            // 1767\n  for (var j = 0, jj = connections.length; j < jj; j += 1) {                                                           // 1768\n    connections[j].close();                                                                                            // 1769\n  }                                                                                                                    // 1770\n}                                                                                                                      // 1771\n                                                                                                                       // 1772\n/**                                                                                                                    // 1773\n * Disconnects the Peer's connection to the PeerServer. Does not close any                                             // 1774\n *  active connections.                                                                                                // 1775\n * Warning: The peer can no longer create or accept connections after being                                            // 1776\n *  disconnected. It also cannot reconnect to the server.                                                              // 1777\n */                                                                                                                    // 1778\nPeer.prototype.disconnect = function() {                                                                               // 1779\n  var self = this;                                                                                                     // 1780\n  util.setZeroTimeout(function(){                                                                                      // 1781\n    if (!self.disconnected) {                                                                                          // 1782\n      self.disconnected = true;                                                                                        // 1783\n      self.open = false;                                                                                               // 1784\n      if (self.socket) {                                                                                               // 1785\n        self.socket.close();                                                                                           // 1786\n      }                                                                                                                // 1787\n      self.emit('disconnected', self.id);                                                                              // 1788\n      self._lastServerId = self.id;                                                                                    // 1789\n      self.id = null;                                                                                                  // 1790\n    }                                                                                                                  // 1791\n  });                                                                                                                  // 1792\n}                                                                                                                      // 1793\n                                                                                                                       // 1794\n/** Attempts to reconnect with the same ID. */                                                                         // 1795\nPeer.prototype.reconnect = function() {                                                                                // 1796\n  if (this.disconnected && !this.destroyed) {                                                                          // 1797\n    util.log('Attempting reconnection to server with ID ' + this._lastServerId);                                       // 1798\n    this.disconnected = false;                                                                                         // 1799\n    this._initializeServerConnection();                                                                                // 1800\n    this._initialize(this._lastServerId);                                                                              // 1801\n  } else if (this.destroyed) {                                                                                         // 1802\n    throw new Error('This peer cannot reconnect to the server. It has already been destroyed.');                       // 1803\n  } else if (!this.disconnected && !this.open) {                                                                       // 1804\n    // Do nothing. We're still connecting the first time.                                                              // 1805\n    util.error('In a hurry? We\\'re still trying to make the initial connection!');                                     // 1806\n  } else {                                                                                                             // 1807\n    throw new Error('Peer ' + this.id + ' cannot reconnect because it is not disconnected from the server!');          // 1808\n  }                                                                                                                    // 1809\n};                                                                                                                     // 1810\n                                                                                                                       // 1811\n/**                                                                                                                    // 1812\n * Get a list of available peer IDs. If you're running your own server, you'll                                         // 1813\n * want to set allow_discovery: true in the PeerServer options. If you're using                                        // 1814\n * the cloud server, email team@peerjs.com to get the functionality enabled for                                        // 1815\n * your key.                                                                                                           // 1816\n */                                                                                                                    // 1817\nPeer.prototype.listAllPeers = function(cb) {                                                                           // 1818\n  cb = cb || function() {};                                                                                            // 1819\n  var self = this;                                                                                                     // 1820\n  var http = new XMLHttpRequest();                                                                                     // 1821\n  var protocol = this.options.secure ? 'https://' : 'http://';                                                         // 1822\n  var url = protocol + this.options.host + ':' + this.options.port                                                     // 1823\n    + this.options.path + this.options.key + '/peers';                                                                 // 1824\n  var queryString = '?ts=' + new Date().getTime() + '' + Math.random();                                                // 1825\n  url += queryString;                                                                                                  // 1826\n                                                                                                                       // 1827\n  // If there's no ID we need to wait for one before trying to init socket.                                            // 1828\n  http.open('get', url, true);                                                                                         // 1829\n  http.onerror = function(e) {                                                                                         // 1830\n    self._abort('server-error', 'Could not get peers from the server.');                                               // 1831\n    cb([]);                                                                                                            // 1832\n  }                                                                                                                    // 1833\n  http.onreadystatechange = function() {                                                                               // 1834\n    if (http.readyState !== 4) {                                                                                       // 1835\n      return;                                                                                                          // 1836\n    }                                                                                                                  // 1837\n    if (http.status === 401) {                                                                                         // 1838\n      var helpfulError = '';                                                                                           // 1839\n      if (self.options.host !== util.CLOUD_HOST) {                                                                     // 1840\n        helpfulError = 'It looks like you\\'re using the cloud server. You can email '                                  // 1841\n          + 'team@peerjs.com to enable peer listing for your API key.';                                                // 1842\n      } else {                                                                                                         // 1843\n        helpfulError = 'You need to enable `allow_discovery` on your self-hosted'                                      // 1844\n          + ' PeerServer to use this feature.';                                                                        // 1845\n      }                                                                                                                // 1846\n      throw new Error('It doesn\\'t look like you have permission to list peers IDs. ' + helpfulError);                 // 1847\n      cb([]);                                                                                                          // 1848\n    } else if (http.status !== 200) {                                                                                  // 1849\n      cb([]);                                                                                                          // 1850\n    } else {                                                                                                           // 1851\n      cb(JSON.parse(http.responseText));                                                                               // 1852\n    }                                                                                                                  // 1853\n  };                                                                                                                   // 1854\n  http.send(null);                                                                                                     // 1855\n}                                                                                                                      // 1856\n                                                                                                                       // 1857\nexports.Peer = Peer;                                                                                                   // 1858\n/**                                                                                                                    // 1859\n * Wraps a DataChannel between two Peers.                                                                              // 1860\n */                                                                                                                    // 1861\nfunction DataConnection(peer, provider, options) {                                                                     // 1862\n  if (!(this instanceof DataConnection)) return new DataConnection(peer, provider, options);                           // 1863\n  EventEmitter.call(this);                                                                                             // 1864\n                                                                                                                       // 1865\n  this.options = util.extend({                                                                                         // 1866\n    serialization: 'binary',                                                                                           // 1867\n    reliable: false                                                                                                    // 1868\n  }, options);                                                                                                         // 1869\n                                                                                                                       // 1870\n  // Connection is not open yet.                                                                                       // 1871\n  this.open = false;                                                                                                   // 1872\n  this.type = 'data';                                                                                                  // 1873\n  this.peer = peer;                                                                                                    // 1874\n  this.provider = provider;                                                                                            // 1875\n                                                                                                                       // 1876\n  this.id = this.options.connectionId || DataConnection._idPrefix + util.randomToken();                                // 1877\n                                                                                                                       // 1878\n  this.label = this.options.label || this.id;                                                                          // 1879\n  this.metadata = this.options.metadata;                                                                               // 1880\n  this.serialization = this.options.serialization;                                                                     // 1881\n  this.reliable = this.options.reliable;                                                                               // 1882\n                                                                                                                       // 1883\n  // Data channel buffering.                                                                                           // 1884\n  this._buffer = [];                                                                                                   // 1885\n  this._buffering = false;                                                                                             // 1886\n  this.bufferSize = 0;                                                                                                 // 1887\n                                                                                                                       // 1888\n  // For storing large data.                                                                                           // 1889\n  this._chunkedData = {};                                                                                              // 1890\n                                                                                                                       // 1891\n  if (this.options._payload) {                                                                                         // 1892\n    this._peerBrowser = this.options._payload.browser;                                                                 // 1893\n  }                                                                                                                    // 1894\n                                                                                                                       // 1895\n  Negotiator.startConnection(                                                                                          // 1896\n    this,                                                                                                              // 1897\n    this.options._payload || {                                                                                         // 1898\n      originator: true                                                                                                 // 1899\n    }                                                                                                                  // 1900\n  );                                                                                                                   // 1901\n}                                                                                                                      // 1902\n                                                                                                                       // 1903\nutil.inherits(DataConnection, EventEmitter);                                                                           // 1904\n                                                                                                                       // 1905\nDataConnection._idPrefix = 'dc_';                                                                                      // 1906\n                                                                                                                       // 1907\n/** Called by the Negotiator when the DataChannel is ready. */                                                         // 1908\nDataConnection.prototype.initialize = function(dc) {                                                                   // 1909\n  this._dc = this.dataChannel = dc;                                                                                    // 1910\n  this._configureDataChannel();                                                                                        // 1911\n}                                                                                                                      // 1912\n                                                                                                                       // 1913\nDataConnection.prototype._configureDataChannel = function() {                                                          // 1914\n  var self = this;                                                                                                     // 1915\n  if (util.supports.sctp) {                                                                                            // 1916\n    this._dc.binaryType = 'arraybuffer';                                                                               // 1917\n  }                                                                                                                    // 1918\n  this._dc.onopen = function() {                                                                                       // 1919\n    util.log('Data channel connection success');                                                                       // 1920\n    self.open = true;                                                                                                  // 1921\n    self.emit('open');                                                                                                 // 1922\n  }                                                                                                                    // 1923\n                                                                                                                       // 1924\n  // Use the Reliable shim for non Firefox browsers                                                                    // 1925\n  if (!util.supports.sctp && this.reliable) {                                                                          // 1926\n    this._reliable = new Reliable(this._dc, util.debug);                                                               // 1927\n  }                                                                                                                    // 1928\n                                                                                                                       // 1929\n  if (this._reliable) {                                                                                                // 1930\n    this._reliable.onmessage = function(msg) {                                                                         // 1931\n      self.emit('data', msg);                                                                                          // 1932\n    };                                                                                                                 // 1933\n  } else {                                                                                                             // 1934\n    this._dc.onmessage = function(e) {                                                                                 // 1935\n      self._handleDataMessage(e);                                                                                      // 1936\n    };                                                                                                                 // 1937\n  }                                                                                                                    // 1938\n  this._dc.onclose = function(e) {                                                                                     // 1939\n    util.log('DataChannel closed for:', self.peer);                                                                    // 1940\n    self.close();                                                                                                      // 1941\n  };                                                                                                                   // 1942\n}                                                                                                                      // 1943\n                                                                                                                       // 1944\n// Handles a DataChannel message.                                                                                      // 1945\nDataConnection.prototype._handleDataMessage = function(e) {                                                            // 1946\n  var self = this;                                                                                                     // 1947\n  var data = e.data;                                                                                                   // 1948\n  var datatype = data.constructor;                                                                                     // 1949\n  if (this.serialization === 'binary' || this.serialization === 'binary-utf8') {                                       // 1950\n    if (datatype === Blob) {                                                                                           // 1951\n      // Datatype should never be blob                                                                                 // 1952\n      util.blobToArrayBuffer(data, function(ab) {                                                                      // 1953\n        data = util.unpack(ab);                                                                                        // 1954\n        self.emit('data', data);                                                                                       // 1955\n      });                                                                                                              // 1956\n      return;                                                                                                          // 1957\n    } else if (datatype === ArrayBuffer) {                                                                             // 1958\n      data = util.unpack(data);                                                                                        // 1959\n    } else if (datatype === String) {                                                                                  // 1960\n      // String fallback for binary data for browsers that don't support binary yet                                    // 1961\n      var ab = util.binaryStringToArrayBuffer(data);                                                                   // 1962\n      data = util.unpack(ab);                                                                                          // 1963\n    }                                                                                                                  // 1964\n  } else if (this.serialization === 'json') {                                                                          // 1965\n    data = JSON.parse(data);                                                                                           // 1966\n  }                                                                                                                    // 1967\n                                                                                                                       // 1968\n  // Check if we've chunked--if so, piece things back together.                                                        // 1969\n  // We're guaranteed that this isn't 0.                                                                               // 1970\n  if (data.__peerData) {                                                                                               // 1971\n    var id = data.__peerData;                                                                                          // 1972\n    var chunkInfo = this._chunkedData[id] || {data: [], count: 0, total: data.total};                                  // 1973\n                                                                                                                       // 1974\n    chunkInfo.data[data.n] = data.data;                                                                                // 1975\n    chunkInfo.count += 1;                                                                                              // 1976\n                                                                                                                       // 1977\n    if (chunkInfo.total === chunkInfo.count) {                                                                         // 1978\n      // Clean up before making the recursive call to `_handleDataMessage`.                                            // 1979\n      delete this._chunkedData[id];                                                                                    // 1980\n                                                                                                                       // 1981\n      // We've received all the chunks--time to construct the complete data.                                           // 1982\n      data = new Blob(chunkInfo.data);                                                                                 // 1983\n      this._handleDataMessage({data: data});                                                                           // 1984\n    }                                                                                                                  // 1985\n                                                                                                                       // 1986\n    this._chunkedData[id] = chunkInfo;                                                                                 // 1987\n    return;                                                                                                            // 1988\n  }                                                                                                                    // 1989\n                                                                                                                       // 1990\n  this.emit('data', data);                                                                                             // 1991\n}                                                                                                                      // 1992\n                                                                                                                       // 1993\n/**                                                                                                                    // 1994\n * Exposed functionality for users.                                                                                    // 1995\n */                                                                                                                    // 1996\n                                                                                                                       // 1997\n/** Allows user to close connection. */                                                                                // 1998\nDataConnection.prototype.close = function() {                                                                          // 1999\n  if (!this.open) {                                                                                                    // 2000\n    return;                                                                                                            // 2001\n  }                                                                                                                    // 2002\n  this.open = false;                                                                                                   // 2003\n  Negotiator.cleanup(this);                                                                                            // 2004\n  this.emit('close');                                                                                                  // 2005\n}                                                                                                                      // 2006\n                                                                                                                       // 2007\n/** Allows user to send data. */                                                                                       // 2008\nDataConnection.prototype.send = function(data, chunked) {                                                              // 2009\n  if (!this.open) {                                                                                                    // 2010\n    this.emit('error', new Error('Connection is not open. You should listen for the `open` event before sending messages.'));\n    return;                                                                                                            // 2012\n  }                                                                                                                    // 2013\n  if (this._reliable) {                                                                                                // 2014\n    // Note: reliable shim sending will make it so that you cannot customize                                           // 2015\n    // serialization.                                                                                                  // 2016\n    this._reliable.send(data);                                                                                         // 2017\n    return;                                                                                                            // 2018\n  }                                                                                                                    // 2019\n  var self = this;                                                                                                     // 2020\n  if (this.serialization === 'json') {                                                                                 // 2021\n    this._bufferedSend(JSON.stringify(data));                                                                          // 2022\n  } else if (this.serialization === 'binary' || this.serialization === 'binary-utf8') {                                // 2023\n    var blob = util.pack(data);                                                                                        // 2024\n                                                                                                                       // 2025\n    // For Chrome-Firefox interoperability, we need to make Firefox \"chunk\"                                            // 2026\n    // the data it sends out.                                                                                          // 2027\n    var needsChunking = util.chunkedBrowsers[this._peerBrowser] || util.chunkedBrowsers[util.browser];                 // 2028\n    if (needsChunking && !chunked && blob.size > util.chunkedMTU) {                                                    // 2029\n      this._sendChunks(blob);                                                                                          // 2030\n      return;                                                                                                          // 2031\n    }                                                                                                                  // 2032\n                                                                                                                       // 2033\n    // DataChannel currently only supports strings.                                                                    // 2034\n    if (!util.supports.sctp) {                                                                                         // 2035\n      util.blobToBinaryString(blob, function(str) {                                                                    // 2036\n        self._bufferedSend(str);                                                                                       // 2037\n      });                                                                                                              // 2038\n    } else if (!util.supports.binaryBlob) {                                                                            // 2039\n      // We only do this if we really need to (e.g. blobs are not supported),                                          // 2040\n      // because this conversion is costly.                                                                            // 2041\n      util.blobToArrayBuffer(blob, function(ab) {                                                                      // 2042\n        self._bufferedSend(ab);                                                                                        // 2043\n      });                                                                                                              // 2044\n    } else {                                                                                                           // 2045\n      this._bufferedSend(blob);                                                                                        // 2046\n    }                                                                                                                  // 2047\n  } else {                                                                                                             // 2048\n    this._bufferedSend(data);                                                                                          // 2049\n  }                                                                                                                    // 2050\n}                                                                                                                      // 2051\n                                                                                                                       // 2052\nDataConnection.prototype._bufferedSend = function(msg) {                                                               // 2053\n  if (this._buffering || !this._trySend(msg)) {                                                                        // 2054\n    this._buffer.push(msg);                                                                                            // 2055\n    this.bufferSize = this._buffer.length;                                                                             // 2056\n  }                                                                                                                    // 2057\n}                                                                                                                      // 2058\n                                                                                                                       // 2059\n// Returns true if the send succeeds.                                                                                  // 2060\nDataConnection.prototype._trySend = function(msg) {                                                                    // 2061\n  try {                                                                                                                // 2062\n    this._dc.send(msg);                                                                                                // 2063\n  } catch (e) {                                                                                                        // 2064\n    this._buffering = true;                                                                                            // 2065\n                                                                                                                       // 2066\n    var self = this;                                                                                                   // 2067\n    setTimeout(function() {                                                                                            // 2068\n      // Try again.                                                                                                    // 2069\n      self._buffering = false;                                                                                         // 2070\n      self._tryBuffer();                                                                                               // 2071\n    }, 100);                                                                                                           // 2072\n    return false;                                                                                                      // 2073\n  }                                                                                                                    // 2074\n  return true;                                                                                                         // 2075\n}                                                                                                                      // 2076\n                                                                                                                       // 2077\n// Try to send the first message in the buffer.                                                                        // 2078\nDataConnection.prototype._tryBuffer = function() {                                                                     // 2079\n  if (this._buffer.length === 0) {                                                                                     // 2080\n    return;                                                                                                            // 2081\n  }                                                                                                                    // 2082\n                                                                                                                       // 2083\n  var msg = this._buffer[0];                                                                                           // 2084\n                                                                                                                       // 2085\n  if (this._trySend(msg)) {                                                                                            // 2086\n    this._buffer.shift();                                                                                              // 2087\n    this.bufferSize = this._buffer.length;                                                                             // 2088\n    this._tryBuffer();                                                                                                 // 2089\n  }                                                                                                                    // 2090\n}                                                                                                                      // 2091\n                                                                                                                       // 2092\nDataConnection.prototype._sendChunks = function(blob) {                                                                // 2093\n  var blobs = util.chunk(blob);                                                                                        // 2094\n  for (var i = 0, ii = blobs.length; i < ii; i += 1) {                                                                 // 2095\n    var blob = blobs[i];                                                                                               // 2096\n    this.send(blob, true);                                                                                             // 2097\n  }                                                                                                                    // 2098\n}                                                                                                                      // 2099\n                                                                                                                       // 2100\nDataConnection.prototype.handleMessage = function(message) {                                                           // 2101\n  var payload = message.payload;                                                                                       // 2102\n                                                                                                                       // 2103\n  switch (message.type) {                                                                                              // 2104\n    case 'ANSWER':                                                                                                     // 2105\n      this._peerBrowser = payload.browser;                                                                             // 2106\n                                                                                                                       // 2107\n      // Forward to negotiator                                                                                         // 2108\n      Negotiator.handleSDP(message.type, this, payload.sdp);                                                           // 2109\n      break;                                                                                                           // 2110\n    case 'CANDIDATE':                                                                                                  // 2111\n      Negotiator.handleCandidate(this, payload.candidate);                                                             // 2112\n      break;                                                                                                           // 2113\n    default:                                                                                                           // 2114\n      util.warn('Unrecognized message type:', message.type, 'from peer:', this.peer);                                  // 2115\n      break;                                                                                                           // 2116\n  }                                                                                                                    // 2117\n}                                                                                                                      // 2118\n/**                                                                                                                    // 2119\n * Wraps the streaming interface between two Peers.                                                                    // 2120\n */                                                                                                                    // 2121\nfunction MediaConnection(peer, provider, options) {                                                                    // 2122\n  if (!(this instanceof MediaConnection)) return new MediaConnection(peer, provider, options);                         // 2123\n  EventEmitter.call(this);                                                                                             // 2124\n                                                                                                                       // 2125\n  this.options = util.extend({}, options);                                                                             // 2126\n                                                                                                                       // 2127\n  this.open = false;                                                                                                   // 2128\n  this.type = 'media';                                                                                                 // 2129\n  this.peer = peer;                                                                                                    // 2130\n  this.provider = provider;                                                                                            // 2131\n  this.metadata = this.options.metadata;                                                                               // 2132\n  this.localStream = this.options._stream;                                                                             // 2133\n                                                                                                                       // 2134\n  this.id = this.options.connectionId || MediaConnection._idPrefix + util.randomToken();                               // 2135\n  if (this.localStream) {                                                                                              // 2136\n    Negotiator.startConnection(                                                                                        // 2137\n      this,                                                                                                            // 2138\n      {_stream: this.localStream, originator: true}                                                                    // 2139\n    );                                                                                                                 // 2140\n  }                                                                                                                    // 2141\n};                                                                                                                     // 2142\n                                                                                                                       // 2143\nutil.inherits(MediaConnection, EventEmitter);                                                                          // 2144\n                                                                                                                       // 2145\nMediaConnection._idPrefix = 'mc_';                                                                                     // 2146\n                                                                                                                       // 2147\nMediaConnection.prototype.addStream = function(remoteStream) {                                                         // 2148\n  util.log('Receiving stream', remoteStream);                                                                          // 2149\n                                                                                                                       // 2150\n  this.remoteStream = remoteStream;                                                                                    // 2151\n  this.emit('stream', remoteStream); // Should we call this `open`?                                                    // 2152\n                                                                                                                       // 2153\n};                                                                                                                     // 2154\n                                                                                                                       // 2155\nMediaConnection.prototype.handleMessage = function(message) {                                                          // 2156\n  var payload = message.payload;                                                                                       // 2157\n                                                                                                                       // 2158\n  switch (message.type) {                                                                                              // 2159\n    case 'ANSWER':                                                                                                     // 2160\n      // Forward to negotiator                                                                                         // 2161\n      Negotiator.handleSDP(message.type, this, payload.sdp);                                                           // 2162\n      this.open = true;                                                                                                // 2163\n      break;                                                                                                           // 2164\n    case 'CANDIDATE':                                                                                                  // 2165\n      Negotiator.handleCandidate(this, payload.candidate);                                                             // 2166\n      break;                                                                                                           // 2167\n    default:                                                                                                           // 2168\n      util.warn('Unrecognized message type:', message.type, 'from peer:', this.peer);                                  // 2169\n      break;                                                                                                           // 2170\n  }                                                                                                                    // 2171\n}                                                                                                                      // 2172\n                                                                                                                       // 2173\nMediaConnection.prototype.answer = function(stream) {                                                                  // 2174\n  if (this.localStream) {                                                                                              // 2175\n    util.warn('Local stream already exists on this MediaConnection. Are you answering a call twice?');                 // 2176\n    return;                                                                                                            // 2177\n  }                                                                                                                    // 2178\n                                                                                                                       // 2179\n  this.options._payload._stream = stream;                                                                              // 2180\n                                                                                                                       // 2181\n  this.localStream = stream;                                                                                           // 2182\n  Negotiator.startConnection(                                                                                          // 2183\n    this,                                                                                                              // 2184\n    this.options._payload                                                                                              // 2185\n  )                                                                                                                    // 2186\n  // Retrieve lost messages stored because PeerConnection not set up.                                                  // 2187\n  var messages = this.provider._getMessages(this.id);                                                                  // 2188\n  for (var i = 0, ii = messages.length; i < ii; i += 1) {                                                              // 2189\n    this.handleMessage(messages[i]);                                                                                   // 2190\n  }                                                                                                                    // 2191\n  this.open = true;                                                                                                    // 2192\n};                                                                                                                     // 2193\n                                                                                                                       // 2194\n/**                                                                                                                    // 2195\n * Exposed functionality for users.                                                                                    // 2196\n */                                                                                                                    // 2197\n                                                                                                                       // 2198\n/** Allows user to close connection. */                                                                                // 2199\nMediaConnection.prototype.close = function() {                                                                         // 2200\n  if (!this.open) {                                                                                                    // 2201\n    return;                                                                                                            // 2202\n  }                                                                                                                    // 2203\n  this.open = false;                                                                                                   // 2204\n  Negotiator.cleanup(this);                                                                                            // 2205\n  this.emit('close')                                                                                                   // 2206\n};                                                                                                                     // 2207\n/**                                                                                                                    // 2208\n * Manages all negotiations between Peers.                                                                             // 2209\n */                                                                                                                    // 2210\nvar Negotiator = {                                                                                                     // 2211\n  pcs: {                                                                                                               // 2212\n    data: {},                                                                                                          // 2213\n    media: {}                                                                                                          // 2214\n  }, // type => {peerId: {pc_id: pc}}.                                                                                 // 2215\n  //providers: {}, // provider's id => providers (there may be multiple providers/client.                              // 2216\n  queue: [] // connections that are delayed due to a PC being in use.                                                  // 2217\n}                                                                                                                      // 2218\n                                                                                                                       // 2219\nNegotiator._idPrefix = 'pc_';                                                                                          // 2220\n                                                                                                                       // 2221\n/** Returns a PeerConnection object set up correctly (for data, media). */                                             // 2222\nNegotiator.startConnection = function(connection, options) {                                                           // 2223\n  var pc = Negotiator._getPeerConnection(connection, options);                                                         // 2224\n                                                                                                                       // 2225\n  if (connection.type === 'media' && options._stream) {                                                                // 2226\n    // Add the stream.                                                                                                 // 2227\n    pc.addStream(options._stream);                                                                                     // 2228\n  }                                                                                                                    // 2229\n                                                                                                                       // 2230\n  // Set the connection's PC.                                                                                          // 2231\n  connection.pc = connection.peerConnection = pc;                                                                      // 2232\n  // What do we need to do now?                                                                                        // 2233\n  if (options.originator) {                                                                                            // 2234\n    if (connection.type === 'data') {                                                                                  // 2235\n      // Create the datachannel.                                                                                       // 2236\n      var config = {};                                                                                                 // 2237\n      // Dropping reliable:false support, since it seems to be crashing                                                // 2238\n      // Chrome.                                                                                                       // 2239\n      /*if (util.supports.sctp && !options.reliable) {                                                                 // 2240\n        // If we have canonical reliable support...                                                                    // 2241\n        config = {maxRetransmits: 0};                                                                                  // 2242\n      }*/                                                                                                              // 2243\n      // Fallback to ensure older browsers don't crash.                                                                // 2244\n      if (!util.supports.sctp) {                                                                                       // 2245\n        config = {reliable: options.reliable};                                                                         // 2246\n      }                                                                                                                // 2247\n      var dc = pc.createDataChannel(connection.label, config);                                                         // 2248\n      connection.initialize(dc);                                                                                       // 2249\n    }                                                                                                                  // 2250\n                                                                                                                       // 2251\n    if (!util.supports.onnegotiationneeded) {                                                                          // 2252\n      Negotiator._makeOffer(connection);                                                                               // 2253\n    }                                                                                                                  // 2254\n  } else {                                                                                                             // 2255\n    Negotiator.handleSDP('OFFER', connection, options.sdp);                                                            // 2256\n  }                                                                                                                    // 2257\n}                                                                                                                      // 2258\n                                                                                                                       // 2259\nNegotiator._getPeerConnection = function(connection, options) {                                                        // 2260\n  if (!Negotiator.pcs[connection.type]) {                                                                              // 2261\n    util.error(connection.type + ' is not a valid connection type. Maybe you overrode the `type` property somewhere.');\n  }                                                                                                                    // 2263\n                                                                                                                       // 2264\n  if (!Negotiator.pcs[connection.type][connection.peer]) {                                                             // 2265\n    Negotiator.pcs[connection.type][connection.peer] = {};                                                             // 2266\n  }                                                                                                                    // 2267\n  var peerConnections = Negotiator.pcs[connection.type][connection.peer];                                              // 2268\n                                                                                                                       // 2269\n  var pc;                                                                                                              // 2270\n  // Not multiplexing while FF and Chrome have not-great support for it.                                               // 2271\n  /*if (options.multiplex) {                                                                                           // 2272\n    ids = Object.keys(peerConnections);                                                                                // 2273\n    for (var i = 0, ii = ids.length; i < ii; i += 1) {                                                                 // 2274\n      pc = peerConnections[ids[i]];                                                                                    // 2275\n      if (pc.signalingState === 'stable') {                                                                            // 2276\n        break; // We can go ahead and use this PC.                                                                     // 2277\n      }                                                                                                                // 2278\n    }                                                                                                                  // 2279\n  } else */                                                                                                            // 2280\n  if (options.pc) { // Simplest case: PC id already provided for us.                                                   // 2281\n    pc = Negotiator.pcs[connection.type][connection.peer][options.pc];                                                 // 2282\n  }                                                                                                                    // 2283\n                                                                                                                       // 2284\n  if (!pc || pc.signalingState !== 'stable') {                                                                         // 2285\n    pc = Negotiator._startPeerConnection(connection);                                                                  // 2286\n  }                                                                                                                    // 2287\n  return pc;                                                                                                           // 2288\n}                                                                                                                      // 2289\n                                                                                                                       // 2290\n/*                                                                                                                     // 2291\nNegotiator._addProvider = function(provider) {                                                                         // 2292\n  if ((!provider.id && !provider.disconnected) || !provider.socket.open) {                                             // 2293\n    // Wait for provider to obtain an ID.                                                                              // 2294\n    provider.on('open', function(id) {                                                                                 // 2295\n      Negotiator._addProvider(provider);                                                                               // 2296\n    });                                                                                                                // 2297\n  } else {                                                                                                             // 2298\n    Negotiator.providers[provider.id] = provider;                                                                      // 2299\n  }                                                                                                                    // 2300\n}*/                                                                                                                    // 2301\n                                                                                                                       // 2302\n                                                                                                                       // 2303\n/** Start a PC. */                                                                                                     // 2304\nNegotiator._startPeerConnection = function(connection) {                                                               // 2305\n  util.log('Creating RTCPeerConnection.');                                                                             // 2306\n                                                                                                                       // 2307\n  var id = Negotiator._idPrefix + util.randomToken();                                                                  // 2308\n  var optional = {};                                                                                                   // 2309\n                                                                                                                       // 2310\n  if (connection.type === 'data' && !util.supports.sctp) {                                                             // 2311\n    optional = {optional: [{RtpDataChannels: true}]};                                                                  // 2312\n  } else if (connection.type === 'media') {                                                                            // 2313\n    // Interop req for chrome.                                                                                         // 2314\n    optional = {optional: [{DtlsSrtpKeyAgreement: true}]};                                                             // 2315\n  }                                                                                                                    // 2316\n                                                                                                                       // 2317\n  var pc = new RTCPeerConnection(connection.provider.options.config, optional);                                        // 2318\n  Negotiator.pcs[connection.type][connection.peer][id] = pc;                                                           // 2319\n                                                                                                                       // 2320\n  Negotiator._setupListeners(connection, pc, id);                                                                      // 2321\n                                                                                                                       // 2322\n  return pc;                                                                                                           // 2323\n}                                                                                                                      // 2324\n                                                                                                                       // 2325\n/** Set up various WebRTC listeners. */                                                                                // 2326\nNegotiator._setupListeners = function(connection, pc, pc_id) {                                                         // 2327\n  var peerId = connection.peer;                                                                                        // 2328\n  var connectionId = connection.id;                                                                                    // 2329\n  var provider = connection.provider;                                                                                  // 2330\n                                                                                                                       // 2331\n  // ICE CANDIDATES.                                                                                                   // 2332\n  util.log('Listening for ICE candidates.');                                                                           // 2333\n  pc.onicecandidate = function(evt) {                                                                                  // 2334\n    if (evt.candidate) {                                                                                               // 2335\n      util.log('Received ICE candidates for:', connection.peer);                                                       // 2336\n      provider.socket.send({                                                                                           // 2337\n        type: 'CANDIDATE',                                                                                             // 2338\n        payload: {                                                                                                     // 2339\n          candidate: evt.candidate,                                                                                    // 2340\n          type: connection.type,                                                                                       // 2341\n          connectionId: connection.id                                                                                  // 2342\n        },                                                                                                             // 2343\n        dst: peerId                                                                                                    // 2344\n      });                                                                                                              // 2345\n    }                                                                                                                  // 2346\n  };                                                                                                                   // 2347\n                                                                                                                       // 2348\n  pc.oniceconnectionstatechange = function() {                                                                         // 2349\n    switch (pc.iceConnectionState) {                                                                                   // 2350\n      case 'disconnected':                                                                                             // 2351\n      case 'failed':                                                                                                   // 2352\n        util.log('iceConnectionState is disconnected, closing connections to ' + peerId);                              // 2353\n        connection.close();                                                                                            // 2354\n        break;                                                                                                         // 2355\n      case 'completed':                                                                                                // 2356\n        pc.onicecandidate = util.noop;                                                                                 // 2357\n        break;                                                                                                         // 2358\n    }                                                                                                                  // 2359\n  };                                                                                                                   // 2360\n                                                                                                                       // 2361\n  // Fallback for older Chrome impls.                                                                                  // 2362\n  pc.onicechange = pc.oniceconnectionstatechange;                                                                      // 2363\n                                                                                                                       // 2364\n  // ONNEGOTIATIONNEEDED (Chrome)                                                                                      // 2365\n  util.log('Listening for `negotiationneeded`');                                                                       // 2366\n  pc.onnegotiationneeded = function() {                                                                                // 2367\n    util.log('`negotiationneeded` triggered');                                                                         // 2368\n    if (pc.signalingState == 'stable') {                                                                               // 2369\n      Negotiator._makeOffer(connection);                                                                               // 2370\n    } else {                                                                                                           // 2371\n      util.log('onnegotiationneeded triggered when not stable. Is another connection being established?');             // 2372\n    }                                                                                                                  // 2373\n  };                                                                                                                   // 2374\n                                                                                                                       // 2375\n  // DATACONNECTION.                                                                                                   // 2376\n  util.log('Listening for data channel');                                                                              // 2377\n  // Fired between offer and answer, so options should already be saved                                                // 2378\n  // in the options hash.                                                                                              // 2379\n  pc.ondatachannel = function(evt) {                                                                                   // 2380\n    util.log('Received data channel');                                                                                 // 2381\n    var dc = evt.channel;                                                                                              // 2382\n    var connection = provider.getConnection(peerId, connectionId);                                                     // 2383\n    connection.initialize(dc);                                                                                         // 2384\n  };                                                                                                                   // 2385\n                                                                                                                       // 2386\n  // MEDIACONNECTION.                                                                                                  // 2387\n  util.log('Listening for remote stream');                                                                             // 2388\n  pc.onaddstream = function(evt) {                                                                                     // 2389\n    util.log('Received remote stream');                                                                                // 2390\n    var stream = evt.stream;                                                                                           // 2391\n    provider.getConnection(peerId, connectionId).addStream(stream);                                                    // 2392\n  };                                                                                                                   // 2393\n}                                                                                                                      // 2394\n                                                                                                                       // 2395\nNegotiator.cleanup = function(connection) {                                                                            // 2396\n  util.log('Cleaning up PeerConnection to ' + connection.peer);                                                        // 2397\n                                                                                                                       // 2398\n  var pc = connection.pc;                                                                                              // 2399\n                                                                                                                       // 2400\n  if (!!pc && (pc.readyState !== 'closed' || pc.signalingState !== 'closed')) {                                        // 2401\n    pc.close();                                                                                                        // 2402\n    connection.pc = null;                                                                                              // 2403\n  }                                                                                                                    // 2404\n}                                                                                                                      // 2405\n                                                                                                                       // 2406\nNegotiator._makeOffer = function(connection) {                                                                         // 2407\n  var pc = connection.pc;                                                                                              // 2408\n  pc.createOffer(function(offer) {                                                                                     // 2409\n    util.log('Created offer.');                                                                                        // 2410\n                                                                                                                       // 2411\n    if (!util.supports.sctp && connection.type === 'data' && connection.reliable) {                                    // 2412\n      offer.sdp = Reliable.higherBandwidthSDP(offer.sdp);                                                              // 2413\n    }                                                                                                                  // 2414\n                                                                                                                       // 2415\n    pc.setLocalDescription(offer, function() {                                                                         // 2416\n      util.log('Set localDescription: offer', 'for:', connection.peer);                                                // 2417\n      connection.provider.socket.send({                                                                                // 2418\n        type: 'OFFER',                                                                                                 // 2419\n        payload: {                                                                                                     // 2420\n          sdp: offer,                                                                                                  // 2421\n          type: connection.type,                                                                                       // 2422\n          label: connection.label,                                                                                     // 2423\n          connectionId: connection.id,                                                                                 // 2424\n          reliable: connection.reliable,                                                                               // 2425\n          serialization: connection.serialization,                                                                     // 2426\n          metadata: connection.metadata,                                                                               // 2427\n          browser: util.browser                                                                                        // 2428\n        },                                                                                                             // 2429\n        dst: connection.peer                                                                                           // 2430\n      });                                                                                                              // 2431\n    }, function(err) {                                                                                                 // 2432\n      connection.provider.emitError('webrtc', err);                                                                    // 2433\n      util.log('Failed to setLocalDescription, ', err);                                                                // 2434\n    });                                                                                                                // 2435\n  }, function(err) {                                                                                                   // 2436\n    connection.provider.emitError('webrtc', err);                                                                      // 2437\n    util.log('Failed to createOffer, ', err);                                                                          // 2438\n  }, connection.options.constraints);                                                                                  // 2439\n}                                                                                                                      // 2440\n                                                                                                                       // 2441\nNegotiator._makeAnswer = function(connection) {                                                                        // 2442\n  var pc = connection.pc;                                                                                              // 2443\n                                                                                                                       // 2444\n  pc.createAnswer(function(answer) {                                                                                   // 2445\n    util.log('Created answer.');                                                                                       // 2446\n                                                                                                                       // 2447\n    if (!util.supports.sctp && connection.type === 'data' && connection.reliable) {                                    // 2448\n      answer.sdp = Reliable.higherBandwidthSDP(answer.sdp);                                                            // 2449\n    }                                                                                                                  // 2450\n                                                                                                                       // 2451\n    pc.setLocalDescription(answer, function() {                                                                        // 2452\n      util.log('Set localDescription: answer', 'for:', connection.peer);                                               // 2453\n      connection.provider.socket.send({                                                                                // 2454\n        type: 'ANSWER',                                                                                                // 2455\n        payload: {                                                                                                     // 2456\n          sdp: answer,                                                                                                 // 2457\n          type: connection.type,                                                                                       // 2458\n          connectionId: connection.id,                                                                                 // 2459\n          browser: util.browser                                                                                        // 2460\n        },                                                                                                             // 2461\n        dst: connection.peer                                                                                           // 2462\n      });                                                                                                              // 2463\n    }, function(err) {                                                                                                 // 2464\n      connection.provider.emitError('webrtc', err);                                                                    // 2465\n      util.log('Failed to setLocalDescription, ', err);                                                                // 2466\n    });                                                                                                                // 2467\n  }, function(err) {                                                                                                   // 2468\n    connection.provider.emitError('webrtc', err);                                                                      // 2469\n    util.log('Failed to create answer, ', err);                                                                        // 2470\n  });                                                                                                                  // 2471\n}                                                                                                                      // 2472\n                                                                                                                       // 2473\n/** Handle an SDP. */                                                                                                  // 2474\nNegotiator.handleSDP = function(type, connection, sdp) {                                                               // 2475\n  sdp = new RTCSessionDescription(sdp);                                                                                // 2476\n  var pc = connection.pc;                                                                                              // 2477\n                                                                                                                       // 2478\n  util.log('Setting remote description', sdp);                                                                         // 2479\n  pc.setRemoteDescription(sdp, function() {                                                                            // 2480\n    util.log('Set remoteDescription:', type, 'for:', connection.peer);                                                 // 2481\n                                                                                                                       // 2482\n    if (type === 'OFFER') {                                                                                            // 2483\n      Negotiator._makeAnswer(connection);                                                                              // 2484\n    }                                                                                                                  // 2485\n  }, function(err) {                                                                                                   // 2486\n    connection.provider.emitError('webrtc', err);                                                                      // 2487\n    util.log('Failed to setRemoteDescription, ', err);                                                                 // 2488\n  });                                                                                                                  // 2489\n}                                                                                                                      // 2490\n                                                                                                                       // 2491\n/** Handle a candidate. */                                                                                             // 2492\nNegotiator.handleCandidate = function(connection, ice) {                                                               // 2493\n  var candidate = ice.candidate;                                                                                       // 2494\n  var sdpMLineIndex = ice.sdpMLineIndex;                                                                               // 2495\n  connection.pc.addIceCandidate(new RTCIceCandidate({                                                                  // 2496\n    sdpMLineIndex: sdpMLineIndex,                                                                                      // 2497\n    candidate: candidate                                                                                               // 2498\n  }));                                                                                                                 // 2499\n  util.log('Added ICE candidate for:', connection.peer);                                                               // 2500\n}                                                                                                                      // 2501\n/**                                                                                                                    // 2502\n * An abstraction on top of WebSockets and XHR streaming to provide fastest                                            // 2503\n * possible connection for peers.                                                                                      // 2504\n */                                                                                                                    // 2505\nfunction Socket(secure, host, port, path, key) {                                                                       // 2506\n  if (!(this instanceof Socket)) return new Socket(secure, host, port, path, key);                                     // 2507\n                                                                                                                       // 2508\n  EventEmitter.call(this);                                                                                             // 2509\n                                                                                                                       // 2510\n  // Disconnected manually.                                                                                            // 2511\n  this.disconnected = false;                                                                                           // 2512\n  this._queue = [];                                                                                                    // 2513\n                                                                                                                       // 2514\n  var httpProtocol = secure ? 'https://' : 'http://';                                                                  // 2515\n  var wsProtocol = secure ? 'wss://' : 'ws://';                                                                        // 2516\n  this._httpUrl = httpProtocol + host + ':' + port + path + key;                                                       // 2517\n  this._wsUrl = wsProtocol + host + ':' + port + path + 'peerjs?key=' + key;                                           // 2518\n}                                                                                                                      // 2519\n                                                                                                                       // 2520\nutil.inherits(Socket, EventEmitter);                                                                                   // 2521\n                                                                                                                       // 2522\n                                                                                                                       // 2523\n/** Check in with ID or get one from server. */                                                                        // 2524\nSocket.prototype.start = function(id, token) {                                                                         // 2525\n  this.id = id;                                                                                                        // 2526\n                                                                                                                       // 2527\n  this._httpUrl += '/' + id + '/' + token;                                                                             // 2528\n  this._wsUrl += '&id=' + id + '&token=' + token;                                                                      // 2529\n                                                                                                                       // 2530\n  this._startXhrStream();                                                                                              // 2531\n  this._startWebSocket();                                                                                              // 2532\n}                                                                                                                      // 2533\n                                                                                                                       // 2534\n                                                                                                                       // 2535\n/** Start up websocket communications. */                                                                              // 2536\nSocket.prototype._startWebSocket = function(id) {                                                                      // 2537\n  var self = this;                                                                                                     // 2538\n                                                                                                                       // 2539\n  if (this._socket) {                                                                                                  // 2540\n    return;                                                                                                            // 2541\n  }                                                                                                                    // 2542\n                                                                                                                       // 2543\n  this._socket = new WebSocket(this._wsUrl);                                                                           // 2544\n                                                                                                                       // 2545\n  this._socket.onmessage = function(event) {                                                                           // 2546\n    try {                                                                                                              // 2547\n      var data = JSON.parse(event.data);                                                                               // 2548\n      self.emit('message', data);                                                                                      // 2549\n    } catch(e) {                                                                                                       // 2550\n      util.log('Invalid server message', event.data);                                                                  // 2551\n      return;                                                                                                          // 2552\n    }                                                                                                                  // 2553\n  };                                                                                                                   // 2554\n                                                                                                                       // 2555\n  this._socket.onclose = function(event) {                                                                             // 2556\n    util.log('Socket closed.');                                                                                        // 2557\n    self.disconnected = true;                                                                                          // 2558\n    self.emit('disconnected');                                                                                         // 2559\n  };                                                                                                                   // 2560\n                                                                                                                       // 2561\n  // Take care of the queue of connections if necessary and make sure Peer knows                                       // 2562\n  // socket is open.                                                                                                   // 2563\n  this._socket.onopen = function() {                                                                                   // 2564\n    if (self._timeout) {                                                                                               // 2565\n      clearTimeout(self._timeout);                                                                                     // 2566\n      setTimeout(function(){                                                                                           // 2567\n        self._http.abort();                                                                                            // 2568\n        self._http = null;                                                                                             // 2569\n      }, 5000);                                                                                                        // 2570\n    }                                                                                                                  // 2571\n    self._sendQueuedMessages();                                                                                        // 2572\n    util.log('Socket open');                                                                                           // 2573\n  };                                                                                                                   // 2574\n}                                                                                                                      // 2575\n                                                                                                                       // 2576\n/** Start XHR streaming. */                                                                                            // 2577\nSocket.prototype._startXhrStream = function(n) {                                                                       // 2578\n  try {                                                                                                                // 2579\n    var self = this;                                                                                                   // 2580\n    this._http = new XMLHttpRequest();                                                                                 // 2581\n    this._http._index = 1;                                                                                             // 2582\n    this._http._streamIndex = n || 0;                                                                                  // 2583\n    this._http.open('post', this._httpUrl + '/id?i=' + this._http._streamIndex, true);                                 // 2584\n    this._http.onreadystatechange = function() {                                                                       // 2585\n      if (this.readyState == 2 && this.old) {                                                                          // 2586\n        this.old.abort();                                                                                              // 2587\n        delete this.old;                                                                                               // 2588\n      } else if (this.readyState > 2 && this.status === 200 && this.responseText) {                                    // 2589\n        self._handleStream(this);                                                                                      // 2590\n      } else if (this.status !== 200) {                                                                                // 2591\n        // If we get a different status code, likely something went wrong.                                             // 2592\n        // Stop streaming.                                                                                             // 2593\n        clearTimeout(self._timeout);                                                                                   // 2594\n        self.emit('disconnected');                                                                                     // 2595\n      }                                                                                                                // 2596\n    };                                                                                                                 // 2597\n    this._http.send(null);                                                                                             // 2598\n    this._setHTTPTimeout();                                                                                            // 2599\n  } catch(e) {                                                                                                         // 2600\n    util.log('XMLHttpRequest not available; defaulting to WebSockets');                                                // 2601\n  }                                                                                                                    // 2602\n}                                                                                                                      // 2603\n                                                                                                                       // 2604\n                                                                                                                       // 2605\n/** Handles onreadystatechange response as a stream. */                                                                // 2606\nSocket.prototype._handleStream = function(http) {                                                                      // 2607\n  // 3 and 4 are loading/done state. All others are not relevant.                                                      // 2608\n  var messages = http.responseText.split('\\n');                                                                        // 2609\n                                                                                                                       // 2610\n  // Check to see if anything needs to be processed on buffer.                                                         // 2611\n  if (http._buffer) {                                                                                                  // 2612\n    while (http._buffer.length > 0) {                                                                                  // 2613\n      var index = http._buffer.shift();                                                                                // 2614\n      var bufferedMessage = messages[index];                                                                           // 2615\n      try {                                                                                                            // 2616\n        bufferedMessage = JSON.parse(bufferedMessage);                                                                 // 2617\n      } catch(e) {                                                                                                     // 2618\n        http._buffer.shift(index);                                                                                     // 2619\n        break;                                                                                                         // 2620\n      }                                                                                                                // 2621\n      this.emit('message', bufferedMessage);                                                                           // 2622\n    }                                                                                                                  // 2623\n  }                                                                                                                    // 2624\n                                                                                                                       // 2625\n  var message = messages[http._index];                                                                                 // 2626\n  if (message) {                                                                                                       // 2627\n    http._index += 1;                                                                                                  // 2628\n    // Buffering--this message is incomplete and we'll get to it next time.                                            // 2629\n    // This checks if the httpResponse ended in a `\\n`, in which case the last                                         // 2630\n    // element of messages should be the empty string.                                                                 // 2631\n    if (http._index === messages.length) {                                                                             // 2632\n      if (!http._buffer) {                                                                                             // 2633\n        http._buffer = [];                                                                                             // 2634\n      }                                                                                                                // 2635\n      http._buffer.push(http._index - 1);                                                                              // 2636\n    } else {                                                                                                           // 2637\n      try {                                                                                                            // 2638\n        message = JSON.parse(message);                                                                                 // 2639\n      } catch(e) {                                                                                                     // 2640\n        util.log('Invalid server message', message);                                                                   // 2641\n        return;                                                                                                        // 2642\n      }                                                                                                                // 2643\n      this.emit('message', message);                                                                                   // 2644\n    }                                                                                                                  // 2645\n  }                                                                                                                    // 2646\n}                                                                                                                      // 2647\n                                                                                                                       // 2648\nSocket.prototype._setHTTPTimeout = function() {                                                                        // 2649\n  var self = this;                                                                                                     // 2650\n  this._timeout = setTimeout(function() {                                                                              // 2651\n    var old = self._http;                                                                                              // 2652\n    if (!self._wsOpen()) {                                                                                             // 2653\n      self._startXhrStream(old._streamIndex + 1);                                                                      // 2654\n      self._http.old = old;                                                                                            // 2655\n    } else {                                                                                                           // 2656\n      old.abort();                                                                                                     // 2657\n    }                                                                                                                  // 2658\n  }, 25000);                                                                                                           // 2659\n}                                                                                                                      // 2660\n                                                                                                                       // 2661\n/** Is the websocket currently open? */                                                                                // 2662\nSocket.prototype._wsOpen = function() {                                                                                // 2663\n  return this._socket && this._socket.readyState == 1;                                                                 // 2664\n}                                                                                                                      // 2665\n                                                                                                                       // 2666\n/** Send queued messages. */                                                                                           // 2667\nSocket.prototype._sendQueuedMessages = function() {                                                                    // 2668\n  for (var i = 0, ii = this._queue.length; i < ii; i += 1) {                                                           // 2669\n    this.send(this._queue[i]);                                                                                         // 2670\n  }                                                                                                                    // 2671\n}                                                                                                                      // 2672\n                                                                                                                       // 2673\n/** Exposed send for DC & Peer. */                                                                                     // 2674\nSocket.prototype.send = function(data) {                                                                               // 2675\n  if (this.disconnected) {                                                                                             // 2676\n    return;                                                                                                            // 2677\n  }                                                                                                                    // 2678\n                                                                                                                       // 2679\n  // If we didn't get an ID yet, we can't yet send anything so we should queue                                         // 2680\n  // up these messages.                                                                                                // 2681\n  if (!this.id) {                                                                                                      // 2682\n    this._queue.push(data);                                                                                            // 2683\n    return;                                                                                                            // 2684\n  }                                                                                                                    // 2685\n                                                                                                                       // 2686\n  if (!data.type) {                                                                                                    // 2687\n    this.emit('error', 'Invalid message');                                                                             // 2688\n    return;                                                                                                            // 2689\n  }                                                                                                                    // 2690\n                                                                                                                       // 2691\n  var message = JSON.stringify(data);                                                                                  // 2692\n  if (this._wsOpen()) {                                                                                                // 2693\n    this._socket.send(message);                                                                                        // 2694\n  } else {                                                                                                             // 2695\n    var http = new XMLHttpRequest();                                                                                   // 2696\n    var url = this._httpUrl + '/' + data.type.toLowerCase();                                                           // 2697\n    http.open('post', url, true);                                                                                      // 2698\n    http.setRequestHeader('Content-Type', 'application/json');                                                         // 2699\n    http.send(message);                                                                                                // 2700\n  }                                                                                                                    // 2701\n}                                                                                                                      // 2702\n                                                                                                                       // 2703\nSocket.prototype.close = function() {                                                                                  // 2704\n  if (!this.disconnected && this._wsOpen()) {                                                                          // 2705\n    this._socket.close();                                                                                              // 2706\n    this.disconnected = true;                                                                                          // 2707\n  }                                                                                                                    // 2708\n}                                                                                                                      // 2709\n                                                                                                                       // 2710\n})(this);                                                                                                              // 2711\n                                                                                                                       // 2712\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}